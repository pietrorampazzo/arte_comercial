{
  "success": true,
  "executive_summary": {
    "analysis_date": "2025-07-07T23:18:56.556755",
    "total_cards_analyzed": 39,
    "total_prompts_analyzed": 5,
    "total_correlations_found": 79,
    "high_priority_items": 0,
    "average_correlation_score": 0.412,
    "top_correlations": [
      {
        "card_id": "685772ca7850675037497a1c",
        "card_name": "Pipeline",
        "card_list": "Procesos",
        "card_priority": 2.0,
        "card_automation_potential": 6.0,
        "card_business_value": 4.6,
        "prompt_filename": "GPT.py",
        "prompt_category": "AI_Integration",
        "prompt_complexity": 14.9,
        "prompt_effort": "M√âDIO",
        "prompt_tags": [
          "API_INTEGRATION",
          "DATA_PROCESSING",
          "AI_INTEGRATION",
          "TRELLO_AUTOMATION",
          "ASYNC_PROCESSING"
        ],
        "semantic_score": 0.028,
        "automation_score": 1.0,
        "business_score": 0.357,
        "final_score": 0.483,
        "implementation_priority": "BAIXA",
        "estimated_roi": "M√âDIO (150-300%)",
        "suggested_actions": [
          "üìã AVALIAR OPORTUNIDADE",
          "üîç Monitorar para futuras melhorias",
          "ü§ñ Configurar integra√ß√£o com IA"
        ],
        "implementation_steps": [
          "1. Analisar requisitos espec√≠ficos do card",
          "2. Adaptar c√≥digo de GPT.py",
          "3. Configurar credenciais e APIs necess√°rias",
          "3.1. Configurar chaves de API da OpenAI",
          "4. Implementar testes unit√°rios",
          "5. Fazer deploy em ambiente de teste",
          "6. Validar funcionamento com dados reais",
          "7. Deploy em produ√ß√£o",
          "8. Monitorar e otimizar performance"
        ]
      },
      {
        "card_id": "685772ca7850675037497a1c",
        "card_name": "Pipeline",
        "card_list": "Procesos",
        "card_priority": 2.0,
        "card_automation_potential": 6.0,
        "card_business_value": 4.6,
        "prompt_filename": "data_processor.py",
        "prompt_category": "Data_Processing",
        "prompt_complexity": 17.0,
        "prompt_effort": "ALTO",
        "prompt_tags": [
          "DATA_PROCESSING",
          "TRELLO_AUTOMATION"
        ],
        "semantic_score": 0.01,
        "automation_score": 1.0,
        "business_score": 0.305,
        "final_score": 0.465,
        "implementation_priority": "BAIXA",
        "estimated_roi": "M√âDIO (150-300%)",
        "suggested_actions": [
          "üìã AVALIAR OPORTUNIDADE",
          "üîç Monitorar para futuras melhorias",
          "üìä Implementar processamento de dados"
        ],
        "implementation_steps": [
          "1. Analisar requisitos espec√≠ficos do card",
          "2. Adaptar c√≥digo de data_processor.py",
          "3. Configurar credenciais e APIs necess√°rias",
          "4. Implementar testes unit√°rios",
          "5. Fazer deploy em ambiente de teste",
          "6. Validar funcionamento com dados reais",
          "7. Deploy em produ√ß√£o",
          "8. Monitorar e otimizar performance"
        ]
      },
      {
        "card_id": "6869a90018fdee81dbf0ffaf",
        "card_name": "ALINHAMENTO",
        "card_list": "Procesos",
        "card_priority": 2.0,
        "card_automation_potential": 7.5,
        "card_business_value": 2.6,
        "prompt_filename": "GPT.py",
        "prompt_category": "AI_Integration",
        "prompt_complexity": 14.9,
        "prompt_effort": "M√âDIO",
        "prompt_tags": [
          "API_INTEGRATION",
          "DATA_PROCESSING",
          "AI_INTEGRATION",
          "TRELLO_AUTOMATION",
          "ASYNC_PROCESSING"
        ],
        "semantic_score": 0.031,
        "automation_score": 1.0,
        "business_score": 0.258,
        "final_score": 0.464,
        "implementation_priority": "BAIXA",
        "estimated_roi": "M√âDIO (150-300%)",
        "suggested_actions": [
          "üìã AVALIAR OPORTUNIDADE",
          "üîç Monitorar para futuras melhorias",
          "ü§ñ Configurar integra√ß√£o com IA"
        ],
        "implementation_steps": [
          "1. Analisar requisitos espec√≠ficos do card",
          "2. Adaptar c√≥digo de GPT.py",
          "3. Configurar credenciais e APIs necess√°rias",
          "3.1. Configurar chaves de API da OpenAI",
          "4. Implementar testes unit√°rios",
          "5. Fazer deploy em ambiente de teste",
          "6. Validar funcionamento com dados reais",
          "7. Deploy em produ√ß√£o",
          "8. Monitorar e otimizar performance"
        ]
      },
      {
        "card_id": "685772ca7850675037497a1c",
        "card_name": "Pipeline",
        "card_list": "Procesos",
        "card_priority": 2.0,
        "card_automation_potential": 6.0,
        "card_business_value": 4.6,
        "prompt_filename": "government_apis_integration.py",
        "prompt_category": "Government_APIs",
        "prompt_complexity": 17.8,
        "prompt_effort": "ALTO",
        "prompt_tags": [
          "API_INTEGRATION",
          "DATA_PROCESSING",
          "AI_INTEGRATION",
          "TRELLO_AUTOMATION",
          "GOVERNMENT_APIS"
        ],
        "semantic_score": 0.014,
        "automation_score": 1.0,
        "business_score": 0.285,
        "final_score": 0.463,
        "implementation_priority": "BAIXA",
        "estimated_roi": "M√âDIO (150-300%)",
        "suggested_actions": [
          "üìã AVALIAR OPORTUNIDADE",
          "üîç Monitorar para futuras melhorias",
          "üèõÔ∏è Configurar APIs governamentais"
        ],
        "implementation_steps": [
          "1. Analisar requisitos espec√≠ficos do card",
          "2. Adaptar c√≥digo de government_apis_integration.py",
          "3. Configurar credenciais e APIs necess√°rias",
          "3.1. Validar acesso √†s APIs governamentais",
          "4. Implementar testes unit√°rios",
          "5. Fazer deploy em ambiente de teste",
          "6. Validar funcionamento com dados reais",
          "7. Deploy em produ√ß√£o",
          "8. Monitorar e otimizar performance"
        ]
      },
      {
        "card_id": "685892b2170a6ae4c935b979",
        "card_name": "Automa√ß√µes",
        "card_list": "Procesos",
        "card_priority": 2.0,
        "card_automation_potential": 10.0,
        "card_business_value": 2.6,
        "prompt_filename": "GPT.py",
        "prompt_category": "AI_Integration",
        "prompt_complexity": 14.9,
        "prompt_effort": "M√âDIO",
        "prompt_tags": [
          "API_INTEGRATION",
          "DATA_PROCESSING",
          "AI_INTEGRATION",
          "TRELLO_AUTOMATION",
          "ASYNC_PROCESSING"
        ],
        "semantic_score": 0.029,
        "automation_score": 1.0,
        "business_score": 0.258,
        "final_score": 0.463,
        "implementation_priority": "BAIXA",
        "estimated_roi": "ALTO (300-500%)",
        "suggested_actions": [
          "üìã AVALIAR OPORTUNIDADE",
          "üîç Monitorar para futuras melhorias",
          "ü§ñ Configurar integra√ß√£o com IA"
        ],
        "implementation_steps": [
          "1. Analisar requisitos espec√≠ficos do card",
          "2. Adaptar c√≥digo de GPT.py",
          "3. Configurar credenciais e APIs necess√°rias",
          "3.1. Configurar chaves de API da OpenAI",
          "4. Implementar testes unit√°rios",
          "5. Fazer deploy em ambiente de teste",
          "6. Validar funcionamento com dados reais",
          "7. Deploy em produ√ß√£o",
          "8. Monitorar e otimizar performance"
        ]
      }
    ],
    "categories_analysis": {
      "AI_Integration": {
        "count": 16,
        "avg_score": 0.43881249999999994,
        "total_score": 7.020999999999999
      },
      "Data_Processing": {
        "count": 15,
        "avg_score": 0.384,
        "total_score": 5.76
      },
      "Government_APIs": {
        "count": 16,
        "avg_score": 0.41893749999999996,
        "total_score": 6.702999999999999
      },
      "Trello_Automation": {
        "count": 16,
        "avg_score": 0.4079374999999999,
        "total_score": 6.526999999999998
      },
      "API_Integration": {
        "count": 16,
        "avg_score": 0.40637499999999993,
        "total_score": 6.501999999999999
      }
    },
    "roi_distribution": {
      "M√âDIO (150-300%)": 15,
      "ALTO (300-500%)": 5,
      "BAIXO (<150%)": 59
    },
    "recommendations": [
      "üî• Categoria 'AI_Integration' tem maior potencial (16 correla√ß√µes)",
      "üí∞ 5 oportunidades com ROI alto identificadas",
      "‚ö° Implementar automa√ß√µes em fases para reduzir riscos",
      "üìä Estabelecer m√©tricas de sucesso antes da implementa√ß√£o"
    ]
  },
  "detailed_correlations": [
    {
      "card_id": "685772ca7850675037497a1c",
      "card_name": "Pipeline",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 4.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.028,
      "automation_score": 1.0,
      "business_score": 0.357,
      "final_score": 0.483,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685772ca7850675037497a1c",
      "card_name": "Pipeline",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 4.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.01,
      "automation_score": 1.0,
      "business_score": 0.305,
      "final_score": 0.465,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "6869a90018fdee81dbf0ffaf",
      "card_name": "ALINHAMENTO",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.031,
      "automation_score": 1.0,
      "business_score": 0.258,
      "final_score": 0.464,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685772ca7850675037497a1c",
      "card_name": "Pipeline",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 4.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.014,
      "automation_score": 1.0,
      "business_score": 0.285,
      "final_score": 0.463,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685892b2170a6ae4c935b979",
      "card_name": "Automa√ß√µes",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 10.0,
      "card_business_value": 2.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.029,
      "automation_score": 1.0,
      "business_score": 0.258,
      "final_score": 0.463,
      "implementation_priority": "BAIXA",
      "estimated_roi": "ALTO (300-500%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686a1af1c110ef871595e25e",
      "card_name": "VsCode",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.02,
      "automation_score": 1.0,
      "business_score": 0.258,
      "final_score": 0.46,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685772ca7850675037497a1c",
      "card_name": "Pipeline",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 4.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.008,
      "automation_score": 1.0,
      "business_score": 0.23,
      "final_score": 0.449,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "6869a90018fdee81dbf0ffaf",
      "card_name": "ALINHAMENTO",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.019,
      "automation_score": 1.0,
      "business_score": 0.205,
      "final_score": 0.448,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685772ca7850675037497a1c",
      "card_name": "Pipeline",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 4.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.23,
      "final_score": 0.447,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686a1af1c110ef871595e25e",
      "card_name": "VsCode",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.014,
      "automation_score": 1.0,
      "business_score": 0.205,
      "final_score": 0.447,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685892b2170a6ae4c935b979",
      "card_name": "Automa√ß√µes",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 10.0,
      "card_business_value": 2.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.008,
      "automation_score": 1.0,
      "business_score": 0.205,
      "final_score": 0.444,
      "implementation_priority": "BAIXA",
      "estimated_roi": "ALTO (300-500%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "6869a90018fdee81dbf0ffaf",
      "card_name": "ALINHAMENTO",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.014,
      "automation_score": 1.0,
      "business_score": 0.185,
      "final_score": 0.442,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685892b2170a6ae4c935b979",
      "card_name": "Automa√ß√µes",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 10.0,
      "card_business_value": 2.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.01,
      "automation_score": 1.0,
      "business_score": 0.185,
      "final_score": 0.441,
      "implementation_priority": "BAIXA",
      "estimated_roi": "ALTO (300-500%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152989",
      "card_name": "PROMPT QWEN",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.023,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.441,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5010595f8a55bc6999",
      "card_name": "PROMPT 1.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.023,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.441,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685eb87db5c16753f98537fa",
      "card_name": "Prompt Agente Edital (GPT)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.022,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.44,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc8686821529a5",
      "card_name": "Prompt Agente Or√ßamentario (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.018,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.439,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686a1af1c110ef871595e25e",
      "card_name": "VsCode",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.004,
      "automation_score": 1.0,
      "business_score": 0.185,
      "final_score": 0.439,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685f4d17b85361baa1bb98ab",
      "card_name": "Agente Or√ßamentario 2.0 (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.014,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.437,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5cd2ee53346df06e1b",
      "card_name": "PROMPT 2.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.013,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.437,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff7710e2b6c7c84bdae3",
      "card_name": "PROMPT 4.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.013,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.437,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff6a9fa72c127dcefae3",
      "card_name": "PROMPT 3.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.012,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.436,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "6869a90018fdee81dbf0ffaf",
      "card_name": "ALINHAMENTO",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.022,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.435,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff8243c03071b2b97700",
      "card_name": "PROMPT 5.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.009,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.435,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affb638a5d15c8d42bec6",
      "card_name": "PROMPT 6.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.009,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.435,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affc4e7cc85dcf3085da4",
      "card_name": "PROMPT 7.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.008,
      "automation_score": 1.0,
      "business_score": 0.158,
      "final_score": 0.435,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686a1af1c110ef871595e25e",
      "card_name": "VsCode",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.012,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.431,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685892b2170a6ae4c935b979",
      "card_name": "Automa√ß√µes",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 10.0,
      "card_business_value": 2.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.01,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.43,
      "implementation_priority": "BAIXA",
      "estimated_roi": "ALTO (300-500%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "6869a90018fdee81dbf0ffaf",
      "card_name": "ALINHAMENTO",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.008,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.429,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685892b2170a6ae4c935b979",
      "card_name": "Automa√ß√µes",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 10.0,
      "card_business_value": 2.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.426,
      "implementation_priority": "BAIXA",
      "estimated_roi": "ALTO (300-500%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686a1af1c110ef871595e25e",
      "card_name": "VsCode",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 7.5,
      "card_business_value": 2.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.13,
      "final_score": 0.426,
      "implementation_priority": "BAIXA",
      "estimated_roi": "M√âDIO (150-300%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff6a9fa72c127dcefae3",
      "card_name": "PROMPT 3.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.014,
      "automation_score": 1.0,
      "business_score": 0.105,
      "final_score": 0.426,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc8686821529a5",
      "card_name": "Prompt Agente Or√ßamentario (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.008,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.42,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152989",
      "card_name": "PROMPT QWEN",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.007,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.42,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff7710e2b6c7c84bdae3",
      "card_name": "PROMPT 4.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.005,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.419,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff8243c03071b2b97700",
      "card_name": "PROMPT 5.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.006,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.419,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685f4d17b85361baa1bb98ab",
      "card_name": "Agente Or√ßamentario 2.0 (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.004,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.418,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affb638a5d15c8d42bec6",
      "card_name": "PROMPT 6.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.418,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685eb87db5c16753f98537fa",
      "card_name": "Prompt Agente Edital (GPT)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.417,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5010595f8a55bc6999",
      "card_name": "PROMPT 1.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.417,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5cd2ee53346df06e1b",
      "card_name": "PROMPT 2.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.417,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff6a9fa72c127dcefae3",
      "card_name": "PROMPT 3.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.417,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affc4e7cc85dcf3085da4",
      "card_name": "PROMPT 7.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.085,
      "final_score": 0.417,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152989",
      "card_name": "PROMPT QWEN",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.007,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.409,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc8686821529a5",
      "card_name": "Prompt Agente Or√ßamentario (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.004,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685f4d17b85361baa1bb98ab",
      "card_name": "Agente Or√ßamentario 2.0 (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.004,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152989",
      "card_name": "PROMPT QWEN",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff7710e2b6c7c84bdae3",
      "card_name": "PROMPT 4.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff7710e2b6c7c84bdae3",
      "card_name": "PROMPT 4.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.002,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff8243c03071b2b97700",
      "card_name": "PROMPT 5.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affb638a5d15c8d42bec6",
      "card_name": "PROMPT 6.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.003,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.407,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685eb87db5c16753f98537fa",
      "card_name": "Prompt Agente Edital (GPT)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685eb87db5c16753f98537fa",
      "card_name": "Prompt Agente Edital (GPT)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc8686821529a5",
      "card_name": "Prompt Agente Or√ßamentario (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685f4d17b85361baa1bb98ab",
      "card_name": "Agente Or√ßamentario 2.0 (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5010595f8a55bc6999",
      "card_name": "PROMPT 1.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5010595f8a55bc6999",
      "card_name": "PROMPT 1.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5cd2ee53346df06e1b",
      "card_name": "PROMPT 2.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5cd2ee53346df06e1b",
      "card_name": "PROMPT 2.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff6a9fa72c127dcefae3",
      "card_name": "PROMPT 3.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff6a9fa72c127dcefae3",
      "card_name": "PROMPT 3.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff8243c03071b2b97700",
      "card_name": "PROMPT 5.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affb638a5d15c8d42bec6",
      "card_name": "PROMPT 6.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affc4e7cc85dcf3085da4",
      "card_name": "PROMPT 7.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affc4e7cc85dcf3085da4",
      "card_name": "PROMPT 7.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 1.0,
      "business_score": 0.03,
      "final_score": 0.406,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff7710e2b6c7c84bdae3",
      "card_name": "PROMPT 4.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.007,
      "automation_score": 0.9,
      "business_score": 0.105,
      "final_score": 0.384,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff8243c03071b2b97700",
      "card_name": "PROMPT 5.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.008,
      "automation_score": 0.9,
      "business_score": 0.105,
      "final_score": 0.384,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affb638a5d15c8d42bec6",
      "card_name": "PROMPT 6.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.008,
      "automation_score": 0.9,
      "business_score": 0.105,
      "final_score": 0.384,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc8686821529a5",
      "card_name": "Prompt Agente Or√ßamentario (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 0.9,
      "business_score": 0.105,
      "final_score": 0.381,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685f4d17b85361baa1bb98ab",
      "card_name": "Agente Or√ßamentario 2.0 (Manus)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 4.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.0,
      "automation_score": 0.9,
      "business_score": 0.105,
      "final_score": 0.381,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152985",
      "card_name": "PROMPTS DEEPSEEK",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "GPT.py",
      "prompt_category": "AI_Integration",
      "prompt_complexity": 14.9,
      "prompt_effort": "M√âDIO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.017,
      "automation_score": 0.75,
      "business_score": 0.158,
      "final_score": 0.338,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "ü§ñ Configurar integra√ß√£o com IA"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de GPT.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar chaves de API da OpenAI",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152989",
      "card_name": "PROMPT QWEN",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.009,
      "automation_score": 0.75,
      "business_score": 0.105,
      "final_score": 0.324,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5010595f8a55bc6999",
      "card_name": "PROMPT 1.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 6.0,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.009,
      "automation_score": 0.75,
      "business_score": 0.105,
      "final_score": 0.324,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686affc4e7cc85dcf3085da4",
      "card_name": "PROMPT 7.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.008,
      "automation_score": 0.75,
      "business_score": 0.105,
      "final_score": 0.324,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "685eb87db5c16753f98537fa",
      "card_name": "Prompt Agente Edital (GPT)",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 3.0,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.004,
      "automation_score": 0.75,
      "business_score": 0.105,
      "final_score": 0.322,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "686aff5cd2ee53346df06e1b",
      "card_name": "PROMPT 2.0",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "data_processor.py",
      "prompt_category": "Data_Processing",
      "prompt_complexity": 17.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.003,
      "automation_score": 0.75,
      "business_score": 0.105,
      "final_score": 0.322,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìä Implementar processamento de dados"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de data_processor.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152985",
      "card_name": "PROMPTS DEEPSEEK",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "government_apis_integration.py",
      "prompt_category": "Government_APIs",
      "prompt_complexity": 17.8,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "semantic_score": 0.004,
      "automation_score": 0.75,
      "business_score": 0.085,
      "final_score": 0.319,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üèõÔ∏è Configurar APIs governamentais"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de government_apis_integration.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Validar acesso √†s APIs governamentais",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152985",
      "card_name": "PROMPTS DEEPSEEK",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "trello_automation.py",
      "prompt_category": "Trello_Automation",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "semantic_score": 0.004,
      "automation_score": 0.75,
      "business_score": 0.03,
      "final_score": 0.308,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üìã Automatizar fluxo no Trello"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de trello_automation.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "3.1. Configurar webhooks do Trello",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    },
    {
      "card_id": "68569b7191cc868682152985",
      "card_name": "PROMPTS DEEPSEEK",
      "card_list": "Procesos",
      "card_priority": 2.0,
      "card_automation_potential": 1.5,
      "card_business_value": 0.6,
      "prompt_filename": "api_connector.py",
      "prompt_category": "API_Integration",
      "prompt_complexity": 20.0,
      "prompt_effort": "ALTO",
      "prompt_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "semantic_score": 0.0,
      "automation_score": 0.75,
      "business_score": 0.03,
      "final_score": 0.306,
      "implementation_priority": "BAIXA",
      "estimated_roi": "BAIXO (<150%)",
      "suggested_actions": [
        "üìã AVALIAR OPORTUNIDADE",
        "üîç Monitorar para futuras melhorias",
        "üîó Configurar integra√ß√µes de API"
      ],
      "implementation_steps": [
        "1. Analisar requisitos espec√≠ficos do card",
        "2. Adaptar c√≥digo de api_connector.py",
        "3. Configurar credenciais e APIs necess√°rias",
        "4. Implementar testes unit√°rios",
        "5. Fazer deploy em ambiente de teste",
        "6. Validar funcionamento com dados reais",
        "7. Deploy em produ√ß√£o",
        "8. Monitorar e otimizar performance"
      ]
    }
  ],
  "cards_analysis": [
    {
      "id": "6869a90018fdee81dbf0ffaf",
      "name": "ALINHAMENTO",
      "desc": "## Leitura do Script e Orienta√ß√µes\n\n## O que o script faz\n\nO script √© um pipeline automatizado para gerenciar licita√ß√µes, integrando Trello, Google Sheets, Google Drive e automa√ß√µes com Selenium. Ele organiza tarefas em cards, executa extra√ß√£o de dados, faz download e upload de arquivos, e sugere pontos de otimiza√ß√£o para agentes de IA.\n\n## O que voc√™ precisa fazer\n\n## 1. **Configurar Credenciais**\n\n- Substitua `\"SUA_TRELLO_KEY\"`, `\"SEU_TRELLO_TOKEN\"` e `\"credentials.json\"` pelas suas credenciais reais do Trello e Google.\n\n## 2. **Ajustar IDs**\n\n- Troque `\"ID_DA_PASTA_LICITACOES\"` pelo ID real da pasta no Google Drive onde os arquivos devem ser salvos.\n\n## 3. **Implementar Download Real**\n\n- O download de arquivos `.txt` e arquivos do preg√£o est√° simulado. Implemente a l√≥gica real usando a biblioteca `requests` ou outra de sua prefer√™ncia para baixar os arquivos a partir das URLs dos anexos.\n\n## 4. **Testar o Pipeline**\n\n- Execute o script com um card de exemplo no Trello para garantir que:\n  - O m√©todo `job_1_trello_card` extrai corretamente UASG e n√∫mero do preg√£o do `.txt`, renomeia o card e atualiza o Google Sheets.\n  - O m√©todo `job_2_download_files` faz o download real do arquivo do ComprasNet, renomeia e faz upload para o Google Drive.\n\n## 5. **Ajustar Planilhas**\n\n- Certifique-se de que a planilha \"Licita√ß√µes\" existe no seu Google Drive e est√° acess√≠vel pelo script.\n- Informe quais planilhas (\"DISPUTA\" e \"FORNECEDOR\") devem ser usadas para testar os prompts DeepSeek e Qwen.\n\n## 6. **Otimizar Prompts dos Agentes de IA**\n\n- Para cada agente (Cards 5 a 8), siga as sugest√µes de otimiza√ß√£o:\n  - **GPT (Card 5):** Adicione valida√ß√£o de duplicatas na tabela principal.\n  - **Manus (Card 6):** Implemente cache local para acelerar buscas.\n  - **DeepSeek (Card 7):** Adicione logging para correspond√™ncias <80%.\n  - **Qwen (Card 8):** Use busca web apenas para casos <80% de compatibilidade.\n\n## Pr√≥ximos Passos Sugeridos\n\n- **Valide o funcionamento do script** com dados reais.\n- **Solicite um diagrama visual** (SVG/HTML) do organograma, se desejar visualizar a estrutura dos cards.\n- **Pe√ßa exemplos de integra√ß√£o dos agentes** (chamadas de API) se quiser automatizar ainda mais o pipeline.\n- **Expanda o funil de execu√ß√£o** detalhando a√ß√µes, prazos e respons√°veis para cada card.\n\n## Confirma√ß√µes Necess√°rias\n\n- O script atende √†s suas necessidades ou precisa de ajustes?\n- Deseja o diagrama visual do organograma?\n- Quais planilhas (\"DISPUTA\" e \"FORNECEDOR\") devo usar para testar os prompts DeepSeek e Qwen?\n\nCom essas informa√ß√µes, √© poss√≠vel refinar o processo e entregar um pipeline ainda mais eficiente e automatizado para sua opera√ß√£o de licita√ß√µes.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 7.5,
      "business_value": 2.6
    },
    {
      "id": "685772ca7850675037497a1c",
      "name": "Pipeline",
      "desc": "1 - Card entra em uma lista\n1\\.1. - Faz leitura do Conteudo( anexo.txt)\n1\\.2. - Pesquisa no portal de compras: ([https://cnetmobile.estaleiro.serpro.gov.br/comprasnet-web/public/compras)](https://cnetmobile.estaleiro.serpro.gov.br/comprasnet-web/public/compras \"‚Äå\") )\n1\\.3. - Faz download do Edital e Arquivos Complementares\n\n2 - Download do arquivo\n2\\.1. - Leitura dos Arquivos impreencindiveis\n2\\.2. - Planilhamento de Licita√ß√£o\n2\\.3. - Execu√ß√£o de Prompt\n\n3 - Prepara√ß√£o da Disputa\n3\\.1. - Plotar Licita√ß√£o no Bot Wavecode (Js.)\n3\\.2. - Nivelar graus da disputa (politica de descontos)\n3\\.3. - Agente de Preg√£o (Resposta ao pregoeiro)\n\n‚Äå\n\n---\n\n# ROTEIRO\n\nGoogle Workspace\n\nGoogle Documentos: template padr√£o para cria√ß√£o de or√ßamentos\n\n1\\.1 Template Padr√£o de Or√ßamento/Proposta comercial contendo:\n\nLogo empresa\n\nData do Or√ßamento\n\nDescri√ß√£o da Disputa: Preg√£o Eletr√¥nico N¬∞xxx Uasg:xxx\n\nCondi√ß√µes de Pagamento e Validade\n\nOr√ßamento com N¬∫Item/Marca/Descri√ß√£o/Qtd/Valor Unitario/Valor Total\n\nInforma√ß√µes bancarias e condi√ß√µes de contrata√ß√£o\n\nRodap√© com informa√ß√µes: CNPJ/Endere√ßo/Cidade/Cep/Inscri√ß√£o Estadual/E-mail/Telefone\n\n‚Äå\n\nGoogle Sheets:\n\n2\\.1. Organiza√ß√£o de Licita√ß√µes em Andamento\n\nID/Timestamp/Dia Preg√£o/UASG/N¬∫ Preg√£o/Link [Compras.gov](http://Compras.gov \"‚Äå\") do Preg√£o/Downloads relacionados a compra do Preg√£o/Proposta.csv elaborada via cruzamento de dados\n\n2\\.2. Template para a \"memoria de calculo\" para organiza√ß√£o do Edital de cada licita√ß√£o:\n\nItem Edital/Descri√ß√£o Edital/Qtde Edital/Valor Unit√°rio de Refer√™ncia Edital/Valor Total de Refer√™ncia Edital/Marca Produto Estoque/Descri√ß√£o Produto Estoque/Valor Produto Estoque/Valor Minimo de Disputa(aplicado margem de lucro 50%)\n\n‚Äå\n\nGoogle Drive:\n\n1. Pasta \"Licita√ß√µes\" por m√™s contendo:\n\n3\\.1. Downloads referentes a compra (zip e pdf) - \"U\\_xxx\\_N\\_yyy\\_E.pdf\"\n\n3\\.2. \"memoria de calculo\" inicial organizada do Edital \"U\\_xxx\\_N\\_yyy\\_O.pdf\"\n\n3\\.3. Or√ßamento elaborado de acordo com ordem do preg√£o \"U\\_xxx\\_N\\_yyy\\_P.pdf\"\n\n‚Äå\n\nTrello: Organizar Pipeline\n\nPREPARANDO (entrada de infos)\n\nORGANIZADO (execu√ß√£o de scripts para elaborar \"memoria de calculo\" modelo de referencia para organiza√ß√£o do Edital de cada licita√ß√£o)\n\nDISPUTA (aguardar o dia da disputa com notifica√ß√£o do Trello)\n\nOR√áAMENTO (monitoramento de licita√ß√£o, chat, or√ßamentos atualizados)\n\nCOMPRAS (chegando empenho realizar compras de fornecedores)\n\nENVIO (despachar mercadorias para os clientes)\n\nRECEBIMENTO (atualizar memoria de calculo com imposto/frete/comiss√£o)\n\nRESUMO (resumir a opera√ß√£o como ganha ou perdida)\n\n‚Äå\n\nVsCode: Automatizar de maneira muito mais eficiente + IA\n1¬∫ Job: Organizar nome do Card no Trello\nRenomear Card > Usar linhda 2,3,4 de (Trello > ard Anexos > Aquivos > \"anexo.txt\")\n\n2¬∫ Job: Arquivos baixados (ZIP, PDF, XLS) e organizados por pasta no Google Drive. IDs de rastreio anotados no Google Sheets e Trello.\n\n2\\.1. üì¶ Downloads Edital: Trello > üìéAnexos >üîóLinks([compras.gov.br](http://compras.gov.br \"‚Äå\") edital) >üì• \"Downloads relacionados a compra\"\nFormato de Downloads referentes a compra (zip e pdf): \"U\\_xxx\\_N\\_yyy\\_E.zip\"\nGoogle Drive > Arte Comercial > Licita√ß√µes > M√™s (Julho/Agosto..)\n\n2\\.2.1. Job: Cria√ß√£o do modelo da memoria de calculo:\n\n2\\.2.2. Leitura do material baixado: Edital , Termo de Referencia , Rela√ß√£o de itens.\n2\\.2.3 Concatenar dados para elabora√ß√£o da Planilha Or√ßamentaria (prezando por OCR, IA para extrair as infos q contenham: Item Edital/Descri√ß√£o Edital/Qtde Edital/Valor Unit√°rio de Refer√™ncia Edital/Valor Total de Refer√™ncia Edital\n\\- etapa critica onde pode ter diversas divergencias no tipo e qualidade de dados presentes em cada um dos editais, essa etapa √© fundamental para ter bom desempenho na hora de cruzar os dados\n2\\.2.4. Montar tabela padr√£o de Or√ßamento contendo:\nItem Edital/Descri√ß√£o Edital/Unidade de Medida de Refer√™ncia Edital/Qtde Itens Edital/Valor Total de Refer√™ncia Edital/Marca Produto Estoque/Descri√ß√£o Produto Estoque/Fornecdor Estoque/Valor Produto Estoque/Valor Minimo de Disputa(aplicado margem de lucro 50%)\n\n4¬∫ Job: Execu√ß√£o do Prompt do ‚ÄúAgente Estrat√©gico‚Äù\n4\\.1. Prompt voltado para cruzar informa√ß√µes na Tabela de Or√ßamento contendo Item Edital/Descri√ß√£o Edital/Qtde Edital/Valor Unit√°rio de Refer√™ncia Edital/Valor Total de Refer√™ncia Edital, buscando uma execu√ß√£o perfeita de analise tecnica dos itens presentes em nosso estoque com os produtos dos nossos fornecedores, priorizando compatibilidade tecnica e melhor(menor) pre√ßo praticado entre nossos itens disponiveis.\n4\\.2. O prompt deve ser desenhado e reajustado sempre que possivel, para aperfei√ßoamento da leitura dos descritivos contidos no edital, e buscando sempre o melhor item disponivel em nosso estoque para concorrer com boas margens de lucro operacional na licia√ß√£o.\n4\\.3. Esse agente pode ser integrado via API com GPT, Manus, Deepseek ou Perplexity\n4\\.4. O resultado esperado deve ser um Or√ßamento formalizado com todos os itens presentes no edital e nosso estoque, para elaborar e facilitar o manuseio da mem√≥ria de calculo pronta para ser plotada no algoritimo de disputa de licita√ß√µes Bote Wavecode que ir√° participar dos preg√µes.\n\n5¬∫ Job: Cria√ß√£o do ‚ÄúAgente Negociante‚Äù que ir√° participar do chat do preg√£o captando informa√ß√µes que sejam voltadas para a A.R.T.E. COMERCIAL LTDA. Ou seja, toda vez que o pregoeiro chamar para convoca√ß√£o do envio das propostas, arquivos complementares, e catalogos, nosso agente ir√° negociar via Chat e se necess√°rio interveniencia humana, redirecionar a conversa via Whatsapp para o responsavel pela licita√ß√£o. Afim de facilitar a intermedia√ß√£o e negocia√ß√£o da etapa final de julgamento e habilita√ß√£o.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [
        "540602e3919c821ddcb3beaa"
      ],
      "priority_score": 2.0,
      "automation_potential": 6.0,
      "business_value": 4.6
    },
    {
      "id": "685892b2170a6ae4c935b979",
      "name": "Automa√ß√µes",
      "desc": "## [https://chatgpt.com/share/6858a521-2fd0-8004-a01c-0b797c90af04](https://chatgpt.com/share/6858a521-2fd0-8004-a01c-0b797c90af04 \"smartCard-inline\")\n\n\nüß† **Objetivo Final**\n\nAutomatizar o processo licitat√≥rio desde a entrada de um card no Trello at√© a prepara√ß√£o para disputa, com IA realizando leitura de anexos, busca por licita√ß√µes, download de arquivos, an√°lise t√©cnica, precifica√ß√£o e intera√ß√£o com pregoeiro via bot.\n\n---\n\n## üîÅ PIPELINE GERAL ‚Äî ESTRUTURA EM 3 FASES:\n\n---\n\n### üìç **FASE 1 ‚Äî DETEC√á√ÉO E COLETA DE LICITA√á√ïES**\n\n#### **1. Card entra em uma lista espec√≠fica do Trello**\n\n- **Gatilho:** Lista \"Capturar Licita√ß√£o\"\n- **Make:** Detecta novo card com anexo `.txt` ou `.pdf`\n\n#### **1.1. Leitura do conte√∫do (anexo.txt ou descri√ß√£o)**\n\n- **Agente LLM:** Extra√ß√£o de dados estruturais: √≥rg√£o, objeto, modalidade, local, prazo.\n- **Make + Webhook:** Envia conte√∫do para o OpenAI (ou Manus, se integrado)\n\n#### **1.2. Pesquisa no Portal de Compras (ComprasNet)**\n\n- **Agente Webscraper (Python ou Puppeteer)**:\n  - Acessa: [https://cnetmobile.estaleiro.serpro.gov.br/comprasnet-web/public/compras](https://cnetmobile.estaleiro.serpro.gov.br/comprasnet-web/public/compras \"‚Äå\")\n  - Busca por **palavras-chave** do objeto (ex: ‚Äúmicrofone‚Äù, ‚Äúmesa de som‚Äù)\n  - Coleta URLs das licita√ß√µes encontradas.\n\n#### **1.3. Download do Edital e Arquivos**\n\n- **Scraper ou Agente de RPA (Ex: UiPath / Python)**\n  - Baixa edital + arquivos complementares (.zip, .doc, .xls)\n  - Armazena em pasta do Google Drive (indexada por ID da licita√ß√£o)\n\n---\n\n### üìÅ **FASE 2 ‚Äî AN√ÅLISE T√âCNICA E ESTRUTURA√á√ÉO DA LICITA√á√ÉO**\n\n#### **2.1. Leitura dos arquivos imprescind√≠veis**\n\n- **Agente OCR + LLM**:\n  - Extrai dados dos PDFs escaneados, Word e Excel\n  - Identifica: itens, quantidades, prazos, exig√™ncias t√©cnicas, habilita√ß√£o.\n\n#### **2.2. Planilhamento da Licita√ß√£o**\n\n- **Google Sheets API ou Make + OpenAI**\n  - Estrutura os dados em colunas: item, descri√ß√£o, qtd, unidade, exig√™ncia t√©cnica\n  - Compara automaticamente com sua **base de fornecedores** (usando an√°lise sem√¢ntica + similaridade)\n\n#### **2.3. Execu√ß√£o de Prompt**\n\n- **Agente de Classifica√ß√£o e Matching T√©cnico**\n  - Aponta: ‚ÄúNosso Produto‚Äù, ‚ÄúPre√ßo Refer√™ncia‚Äù, ‚ÄúMatch T√©cnico (%)‚Äù\n  - Informa se h√° _ader√™ncia t√©cnica total/parcial_ para cada item\n  - Gera relat√≥rio para aprova√ß√£o humana ou autom√°tica\n\n---\n\n### ü§ñ **FASE 3 ‚Äî PREPARA√á√ÉO PARA DISPUTA (PREG√ÉO)**\n\n#### **3.1. Plotar licita√ß√£o no Bot Wavecode (JS)**\n\n- **Make + API JavaScript Webhook**\n  - Cria script no seu bot Wavecode com:\n    - Descri√ß√£o do lote\n    - Tabela de precifica√ß√£o\n    - Condi√ß√µes de entrega\n    - Observa√ß√µes\n\n#### **3.2. Nivelar graus da disputa**\n\n- **Agente de Estrat√©gia Comercial**\n  - Simula diferentes pol√≠ticas de desconto (ex: 5%, 10%, 15%)\n  - Avalia margem de lucro, impostos, log√≠stica\n  - Sugere **grau de agressividade** da proposta (baixo, m√©dio, alto)\n\n#### **3.3. Agente de Preg√£o (respostas ao pregoeiro)**\n\n- **Agente LLM com treinamento espec√≠fico**\n  - Gera respostas autom√°ticas para:\n    - Impugna√ß√µes\n    - Solicita√ß√µes de esclarecimento\n    - Justificativas t√©cnicas\n  - Pode ser plugado via **Zapier + WhatsApp Business API** para atua√ß√£o em tempo real durante o preg√£o\n\n---\n\n## üîß TECNOLOGIAS RECOMENDADAS\n\nEtapaFerramentaTrello + Automa√ß√£o - [Make.com](http://Make.com \"‚Äå\")\n\nLeitura e IA - OpenAI (GPT-4), Manus, Claude\n\nWebscraping/Downloads - Python (Selenium/Puppeteer)\n\nArmazenamento - Google Drive / Sheets\n\nOCR - Tesseract, Adobe API\n\nAn√°lise de Similaridade - FAISS + OpenAI embeddings\n\nBot de Preg√£o - Wavecode (JS), WhatsApp API\n\nEstrat√©gia ComercialPlanilhas + LLM + Prompting\n\n---\n\n## üß© DIAL√âTICA DOS AGENTES\n\n1. **Agente Captura** ‚Üí dispara coleta de dados e leitura inicial\n2. **Agente Classificador** ‚Üí estrutura os dados e identifica itens\n3. **Agente Comparador** ‚Üí cruza edital com base de fornecedores\n4. **Agente Estrat√©gico** ‚Üí recomenda pol√≠ticas de desconto\n5. **Agente Executor** ‚Üí monta disputa, responde pregoeiro, automatiza entrega\n\n---\n\n## üîú Pr√≥ximo passo:\n\nSe quiser, posso:\n\n- Esquematizar um **diagrama de fluxo**\n- Criar um **exemplo funcional no Make**\n- Ajudar a criar os **prompts exatos para cada agente**",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [
        "540602e3919c821ddcb3beaa"
      ],
      "priority_score": 2.0,
      "automation_potential": 10.0,
      "business_value": 2.6
    },
    {
      "id": "6861b65e579d1e22f441dba3",
      "name": "PROMPT PREPARANDO",
      "desc": "Vamos fazer uns ajustes no meu codigo para poder realizar esses proximos jobs, que √© voltado para o link presente no card como na foto onde est√£o indicados o 1¬∫ job e o 2¬∫ job que precisamos arrumar no script\n\n‚Äå\n\n1¬∫ Coluna F da tabela que contem o Link Edital (Trello > Anexos > Link: Salvar dado na celula com o URL)\n\n2¬∫ Downloads Preg√£o (Trello > Anexos > Link > /html/body/app-root/div/div/div/app-cabecalho-compra-acesso-publico/app-cabecalho-compra/div[4]/div[2]/div/app-botoes-cabecalho-compra/span/span/app-botao-relatorios-compra/span/app-botao-icone/span/button/i )\n\nRenomear arquivo seguindo padr√£o \"U\\_xxx\\_N\\_yyy\\_E.pdf ou .zip\" onde U = usag e N = N¬∫ do Preg√£o ou Dispensa (presentes no arquivo .txt)\n\nDa uma olhada no meu script e entenda o que √© necess√°rio fazer: (PYTHON)",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [
        "URGENTE"
      ],
      "due_date": null,
      "members": [],
      "priority_score": 5.0,
      "automation_potential": 3.0,
      "business_value": 1.5
    },
    {
      "id": "685eb87db5c16753f98537fa",
      "name": "Prompt Agente Edital (GPT)",
      "desc": "**Atue como um analista de licita√ß√µes p√∫blicas altamente especializado, com ampla experi√™ncia em editais governamentais e cria√ß√£o de planilhas or√ßament√°rias baseadas em documentos oficiais extensos. Sua tarefa √© analisar editais de licita√ß√£o com foco exclusivo na cria√ß√£o da Planilha Or√ßament√°ria Padr√£o contendo os seguintes campos:**\n\n**Item; Descri√ß√£o; Unidade de Medida; Quantidade; Valor Unit√°rio de Refer√™ncia; Valor Total de Refer√™ncia.**\n\n---\n\n### üß† OBJETIVO:\n\nSeu objetivo √© **extrair automaticamente apenas os dados de interesse** para preenchimento da planilha de or√ßamento, a partir de editais ou termos de refer√™ncia fornecidos. Ignore totalmente outras se√ß√µes como justificativas, regras de participa√ß√£o, cl√°usulas contratuais, legisla√ß√£o aplicada, prazos ou documentos de habilita√ß√£o.\n\n---\n\n### üìå METODOLOGIA (Chain of Thought):\n\n1. **Identifique a Tabela Principal do Objeto do Edital:**\n\n- Localize a se√ß√£o que lista os **itens do objeto**, geralmente com colunas como ‚ÄúItem‚Äù, ‚ÄúDescri√ß√£o‚Äù, ‚ÄúUnidade‚Äù, ‚ÄúQtde‚Äù, ‚ÄúValor Unit√°rio‚Äù, ‚ÄúValor Total‚Äù.\n- Se o edital apresentar v√°rios lotes, extraia todos os itens listados em cada lote.\n\n1. **Crie a Estrutura da Tabela com os seguintes campos, mantendo a ordem:**\n\n- Item\n- Descri√ß√£o do produto conforme reda√ß√£o do edital (n√£o reescreva).\n- Unidade de Medida (se estiver ausente, use o padr√£o: ‚ÄúUNIDADE‚Äù)\n- Quantidade\n- Valor Unit√°rio de Refer√™ncia\n- Valor Total de Refer√™ncia\n\n1. **Normalize os valores num√©ricos:**\n\n- Substitua v√≠rgulas por pontos nos valores (se for necess√°rio para padroniza√ß√£o).\n- Elimine s√≠mbolos de moeda e espa√ßos extras, mantendo o valor em R$ com duas casas decimais (ex: R$ 2.300,00 ‚Üí 2300.00).\n\n1. **Valide a Coer√™ncia da Tabela Gerada:**\n\n- Verifique se todas as colunas est√£o preenchidas.\n- Confira se a multiplica√ß√£o do valor unit√°rio √ó quantidade = valor total.\n- Quando houver erros vis√≠veis, sinalize com um coment√°rio: ‚ÄúATEN√á√ÉO: diverg√™ncia encontrada no item X.‚Äù\n\n1. **Ignore completamente qualquer conte√∫do fora da tabela de produtos, mesmo que esteja detalhado no edital.**\n\n1. **O template de sa√≠da deve ser formatado como uma tabela em Markdown (ou CSV, se especificado), para f√°cil importa√ß√£o ao Google Sheets.**\n\n---\n\n### üéØ INSTRU√á√ÉO FINAL:\n\nVoc√™ repetir√° esse processo com diferentes editais, portanto, certifique-se de que sua an√°lise seja **criteriosa, limpa e reaproveit√°vel**.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [
        "FEITO"
      ],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 3.0,
      "business_value": 0.6
    },
    {
      "id": "68569b7191cc8686821529a5",
      "name": "Prompt Agente Or√ßamentario (Manus)",
      "desc": "Atue como um consultor especialista em licita√ß√µes p√∫blicas, com mais de 20 anos de experi√™ncia em processos licitat√≥rios para fornecimento de produtos eletr√¥nicos, equipamentos de som, √°udio profissional e itens t√©cnicos. Voc√™ domina legisla√ß√µes como Lei 14.133/21, entende a import√¢ncia do princ√≠pio da isonomia e conhece profundamente os crit√©rios de aceita√ß√£o de marcas e modelos equivalentes.\n\nObjetivo: Analisar uma lista de itens de licita√ß√£o ‚Äî contendo descri√ß√µes t√©cnicas, marcas exigidas e/ou especifica√ß√µes restritivas ‚Äî e encontrar correspond√™ncias nos sites:\n\n[https://loja.hayamax.com.br/](https://loja.hayamax.com.br/ \"‚Äå\")\n\n[https://www.musical-express.com.br/](https://www.musical-express.com.br/ \"‚Äå\")\n\nCom base nisso, voc√™ deve:\n\n1. Analisar o conte√∫do\n   Leia e compreenda a descri√ß√£o t√©cnica de cada item informado.\n\nIdentifique poss√≠veis restri√ß√µes indevidas (como marcas espec√≠ficas, aus√™ncia de margem de toler√¢ncia ou exig√™ncias exclusivas).\n\n1. Pesquisar produtos equivalentes\n   Acesse os sites Hayamax e Musical Express.\n\nBusque produtos compat√≠veis com cada item da licita√ß√£o, informando:\n\nNome do produto\n\nMarca\n\nLink direto\n\nPre√ßo (se dispon√≠vel)\n\nCompara√ß√£o t√©cnica com o item original (semelhan√ßas e diferen√ßas).\n\n1. Argumentar tecnicamente (se necess√°rio)\n   Caso encontre item com especifica√ß√£o restritiva ou direcionamento de marca, redija um parecer t√©cnico sugerindo impugna√ß√£o ou apresenta√ß√£o de equivalente.\n\nFundamente sua argumenta√ß√£o com base na legisla√ß√£o e princ√≠pios da administra√ß√£o p√∫blica (isonomia, competitividade, etc.).\n\n1. Gerar relat√≥rio final estruturado\n   Para cada item, entregue:\n\nN√∫mero do item\n\nDescri√ß√£o do edital\n\nProduto(s) compat√≠vel(is)\n\nLink e marca\n\nCompara√ß√£o t√©cnica\n\nObserva√ß√µes legais (se aplic√°vel)\n\nIndica√ß√£o de poss√≠vel impugna√ß√£o ou aceite\n\nExemplo de entrada:\n\"Item 03 ‚Äì Caixa ac√∫stica ativa 15‚Äù com driver titanium de 2‚Äù, pot√™ncia RMS de no m√≠nimo 400W, bivolt, com conex√£o XLR e Bluetooth. Marca sugerida: JBL.\"\n\nFormato de resposta esperado:\nItem 03\n\nDescri√ß√£o edital: Caixa ativa 15‚Äù...\n\nProduto sugerido: Caixa Hayamax XYZ 15‚Äù, 400W RMS, Bluetooth\n\nMarca: Hayamax\n\nLink: [https://www.hayamax.com.br/](https://www.hayamax.com.br/ \"‚Äå\")\n\nComparativo t√©cnico: Atende pot√™ncia, conex√µes, Bluetooth, e driver compat√≠vel\n\nObserva√ß√£o legal: A exig√™ncia de marca ‚ÄúJBL‚Äù pode ser questionada por restringir a competitividade (art. 7¬∫, ¬ß5¬∫ da Lei 14.133/21)\n\nConclus√£o: Produto equivalente ‚Äì apresentar em proposta t√©cnica.\n\nAo receber o input em texto ou PDF, leia com aten√ß√£o e execute todas as etapas acima com m√°ximo detalhamento e rigor t√©cnico.\n\nGera√ß√£o de Tabela (CSV ou XLSX)\nAp√≥s a an√°lise, gere uma tabela estruturada com os seguintes campos:\n\nItem/ Descri√ß√£o/ Unidade de Medida/ Quantidade/Valor Unit√°rio de Refer√™ncia/ Valor Total de Refer√™ncia/ Produto Sugerido/ Marca / Link do Produto\tPre√ßo (se houver)\tCompara√ß√£o T√©cnica\tPode Substituir?\tExige Impugna√ß√£o?\tObserva√ß√£o Jur√≠dica\n\nEssa tabela deve ser export√°vel em formato CSV ou XLSX conforme prefer√™ncia do usu√°rio.\n\nTake a deep breath and work on this problem step-by-step.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 4.5,
      "business_value": 0.6
    },
    {
      "id": "685f4d17b85361baa1bb98ab",
      "name": "Agente Or√ßamentario 2.0 (Manus)",
      "desc": "Atue como um consultor especialista em licita√ß√µes p√∫blicas, com mais de 20 anos de experi√™ncia em processos licitat√≥rios para fornecimento de produtos eletr√¥nicos, equipamentos de som, √°udio profissional e itens t√©cnicos. Voc√™ domina legisla√ß√µes como Lei 14.133/21, entende a import√¢ncia do princ√≠pio da isonomia e conhece profundamente os crit√©rios de aceita√ß√£o de marcas e modelos equivalentes.\n\nObjetivo: Analisar uma lista de itens de licita√ß√£o ‚Äî contendo descri√ß√µes t√©cnicas, marcas exigidas e/ou especifica√ß√µes restritivas ‚Äî e encontrar correspond√™ncias utilizando exclusivamente a planilha de consulta a seguir:\n\n[https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true](https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true \"‚Äå\")\n(ESTOQUE.xlsx)\n\nCom base nisso, voc√™ deve:\n\nAnalisar o conte√∫do\nLeia e compreenda a descri√ß√£o t√©cnica de cada item informado.\nIdentifique poss√≠veis restri√ß√µes indevidas (como marcas espec√≠ficas, aus√™ncia de margem de toler√¢ncia ou exig√™ncias exclusivas).\n\nPesquisar produtos equivalentes\nAcesse exclusivamente a planilha fornecida acima.\nBusque produtos compat√≠veis com cada item da licita√ß√£o, informando:\n\nNome do produto\n\nMarca\n\nLink direto (se dispon√≠vel)\n\nPre√ßo (se dispon√≠vel)\n\nCompara√ß√£o t√©cnica com o item original (semelhan√ßas e diferen√ßas)\n\nArgumentar tecnicamente (se necess√°rio)\nCaso encontre item com especifica√ß√£o restritiva ou direcionamento de marca, redija um parecer t√©cnico sugerindo impugna√ß√£o ou apresenta√ß√£o de equivalente.\nFundamente sua argumenta√ß√£o com base na legisla√ß√£o e princ√≠pios da administra√ß√£o p√∫blica (isonomia, competitividade, etc.).\n\nGerar relat√≥rio final estruturado\nPara cada item, entregue:\n\nN√∫mero do item\n\nDescri√ß√£o do edital\n\nProduto(s) compat√≠vel(is)\n\nLink e marca\n\nCompara√ß√£o t√©cnica\n\nObserva√ß√µes legais (se aplic√°vel)\n\nIndica√ß√£o de poss√≠vel impugna√ß√£o ou aceite\n\nExemplo de entrada:\n\"Item 03 ‚Äì Caixa ac√∫stica ativa 15‚Äù com driver titanium de 2‚Äù, pot√™ncia RMS de no m√≠nimo 400W, bivolt, com conex√£o XLR e Bluetooth. Marca sugerida: JBL.\"\n\nFormato de resposta esperado:\n\nItem 03\nDescri√ß√£o edital: Caixa ativa 15‚Äù...\nProduto sugerido: Caixa XYZ 15‚Äù, 400W RMS, Bluetooth\nMarca: [Marca conforme planilha]\nLink: [Link se houver na planilha]\nComparativo t√©cnico: Atende pot√™ncia, conex√µes, Bluetooth, e driver compat√≠vel\nObserva√ß√£o legal: A exig√™ncia de marca ‚ÄúJBL‚Äù pode ser questionada por restringir a competitividade (art. 7¬∫, ¬ß5¬∫ da Lei 14.133/21)\nConclus√£o: Produto equivalente ‚Äì apresentar em proposta t√©cnica.\n\nAo receber o input em texto ou PDF, leia com aten√ß√£o e execute todas as etapas acima com m√°ximo detalhamento e rigor t√©cnico.\n\nGera√ß√£o de Tabela (CSV ou XLSX)\nAp√≥s a an√°lise, gere uma tabela estruturada com os seguintes campos:\n\nItem,Descri√ß√£o,Unidade de Medida,Quantidade,Valor Unit√°rio de Refer√™ncia,Valor Total de Refer√™ncia,Marca Produto Estoque,Descri√ß√£o Produto Estoque,Fornecedor Estoque,Valor Produto Estoque,Valor com Margem Aplicada, | Compara√ß√£o T√©cnica | Pode Substituir? | Exige Impugna√ß√£o? | Observa√ß√£o Jur√≠dica |\n\nEssa tabela deve ser export√°vel em formato CSV ou XLSX conforme prefer√™ncia do usu√°rio.\n\nTake a deep breath and work on this problem step-by-step.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [
        "OTIMIZAR"
      ],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 4.5,
      "business_value": 0.6
    },
    {
      "id": "68569b7191cc868682152985",
      "name": "PROMPTS DEEPSEEK",
      "desc": "<identidade>\nVoc√™ √© um especialista em licita√ß√µes governamentais para instrumentos musicais, acess√≥rios e equipamentos de sonoriza√ß√£o/√°udio. Sua fun√ß√£o √© automatizar o cruzamento de dados entre editais e a base de fornecedores da empresa, garantindo correspond√™ncias precisas ou alternativas compat√≠veis.\n</identidade>\n\n<funcao>\nPreencher automaticamente a tabela \"DISPUTA\" com itens da planilha \"FORNECEDOR\", seguindo crit√©rios t√©cnicos rigorosos e priorizando correspond√™ncias exatas ou sem√¢nticas.\n</funcao>\n\n<objetivo>\nGerar uma tabela final formatada com:\n\n- Itens do edital\n- Correspond√™ncias exatas ou alternativas mais pr√≥ximas\n- Detalhes t√©cnicos e pre√ßos do fornecedor\n  </objetivo>\n\n<regras>\n\n1. **Priorize correspond√™ncias exatas por C√ìDIGO (SKU)**.\n2. **Se n√£o houver SKU**, busque correspond√™ncia sem√¢ntica na descri√ß√£o (‚â•80% de compatibilidade t√©cnica).\n3. **Nunca sugira itens de categoria diferente** (ex: viol√£o ‚â† guitarra el√©trica).\n4. **Se nenhuma correspond√™ncia**, retorne a alternativa mais pr√≥xima com a marca√ß√£o: \"Nenhuma correspond√™ncia exata, melhor alternativa dispon√≠vel\".\n   </regras>\n\n<fluxo>\n1Ô∏è‚É£ **Leitura do Edital**\n\n- Analise linha por linha a descri√ß√£o, SKU, quantidade e especifica√ß√µes t√©cnicas.\n\n2Ô∏è‚É£ **Busca na Base de Fornecedores**\n   a) **Fase 1 - SKU Exato**:\n      \\- Compare o c√≥digo do edital com a coluna \"C√ìDIGO\" da planilha FORNECEDOR.\n   b) **Fase 2 - Correspond√™ncia Sem√¢ntica** (se Fase 1 falhar):\n      \\- Compare descri√ß√µes usando crit√©rios t√©cnicos:\n        ‚úîÔ∏è Tipo de item (ex: \"viol√£o ac√∫stico\", \"microfone condensador\").\n        ‚úîÔ∏è Especifica√ß√µes-chave (ex: 6 cordas, madeira mogno, 100W RMS).\n        ‚úîÔ∏è Marca e modelo (se aplic√°vel).\n\n3Ô∏è‚É£ **Avalia√ß√£o de Compatibilidade**\n\n- Itens com **‚â•80% de compatibilidade** ser√£o sugeridos como alternativas.\n- Use este c√°lculo:\n  (N¬∫ especifica√ß√µes coincidentes / N¬∫ total de especifica√ß√µes no edital) √ó 100.\n\n4Ô∏è‚É£ **Sa√≠da Formatada**\n\n- Sempre retorne uma tabela com as colunas:\n  **Item | Descri√ß√£o Edital | Quantidade | Total | C√ìDIGO Fornecedor | Descri√ß√£o Fornecedor | Pre√ßo Fornecedor**\n  </fluxo>\n\n<exemplos>\n‚úÖ **Caso 1 - Correspond√™ncia Exata por SKU**\nEdital: \"Viol√£o Cl√°ssico Mogno 6 Cordas (C√ìDIGO: VIO-2023-M6)\"\nFornecedor: \"VIO-2023-M6 | Viol√£o Mogno 6 Cordas, Cor Natural | R$ 850,00\"\nSa√≠da: Preencha a tabela com os dados exatos do fornecedor.\n\n‚úÖ **Caso 2 - Correspond√™ncia Sem√¢ntica (85%)**\nEdital: \"Microfone Din√¢mico para Vocais, Imped√¢ncia 150Œ©\"\nFornecedor: \"MIC-DYN-VOX | Microfone Din√¢mico 160Œ©, Cancelamento de Ru√≠do\"\nSa√≠da: Sugira o item do fornecedor com a nota: \"Compatibilidade: 85% (diferen√ßa na imped√¢ncia: 160Œ© vs. 150Œ©)\".\n\n‚ùå **Caso 3 - Categoria Diferente**\nEdital: \"Guitarra El√©trica 6 Cordas\"\nFornecedor: \"VIOLAO-ELECT | Viol√£o El√©trico 6 Cordas\"\nSa√≠da: Ignore (viol√£o ‚â† guitarra) e marque: \"Nenhuma correspond√™ncia exata\".\n</exemplos>\n\n<style>\n\n- Tom t√©cnico e objetivo.\n- Destaque diferen√ßas cr√≠ticas entre edital e fornecedor.\n- Use negrito para SKUs e porcentagens de compatibilidade.\n  </style>\n\n<notas>\n\n1. Consulte as planilhas para validar dados:\n   - [Planilha DISPUTA](https://docs.google.com/spreadsheets/d/1g05Gx0IaA98X_TUB__GAoAvPd5p6cGEtrqsir21JM_g/edit?usp=sharing \"‚Äå\")\n   - [Planilha FORNECEDOR](https://docs.google.com/spreadsheets/d/1AVVJlm8RWomcxxynfWV_IiLMNnb-6Zo7vXf2uu3wJRg/edit?usp=sharing \"‚Äå\")\n2. Sempre formate a sa√≠da como tabela, mesmo que parcial.\n   </notas>",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 1.5,
      "business_value": 0.6
    },
    {
      "id": "68569b7191cc868682152989",
      "name": "PROMPT QWEN",
      "desc": "<identidade>\nVoc√™ √© um assistente de IA especializado em licita√ß√µes governamentais de produtos de instrumentos musicais, sonoriza√ß√£o e √°udio. Seu papel √© automatizar a busca e o cruzamento de dados entre editais de licita√ß√£o e a base de fornecedores da empresa, garantindo que a melhor op√ß√£o seja encontrada automaticamente.\n</identidade>\n\n<funcao>\nSua principal tarefa √© buscar e preencher automaticamente a tabela de disputa com os itens da tabela de fornecedor.\n\nüìå Processo de busca:\n\n1. Fa√ßa a Leitura completa, linha a linhha da descri√ß√£o dos itens no Edital.\n2. Priorize a correspond√™ncia exata pelo SKU (coluna \"C√ìDIGO\").\n3. Se n√£o houver SKU exato, busque na descri√ß√£o um item com correspond√™ncia mais precisa poss√≠vel.\n4. Nunca deixe de sugerir um item pr√≥ximo, desde que seja compat√≠vel 80% de especifica√ß√µes tecnicas do edital.\n5. Sempre exiba os dados em formato de tabela, replicando a planilha \"DISPUTA\" e adicionando 3 colunas:\n\n\"MARCA FORNECEDOR\" (marca do item correspondente)\n\"DESCRI√á√ÉO FORNECEDOR\" (descri√ß√£o do item correspondente)\n\"PRE√áO FORNECEDOR\" (pre√ßo do item correspondente)\n\n‚ö† Importante:\n\nSe for um instrumento musical, s√≥ retorne instrumentos musicais equivalentes que contenham as mesmas especifica√ß√µes tecnicas que o campo \"DESCRI√á√ÉO\". Ou que tenham pelo menos de 80% √Ä 90% de compatibilidade. Se necessario, busque na WEB para verificar a compatibildidade do item descrito no EDITAL e na planilha fornecedor.\n\nSe for um acess√≥rio, s√≥ retorne acess√≥rios compat√≠veis.\n\nSe for um equipamento de sonoriza√ß√£o, s√≥ retorne equipamentos de sonoriza√ß√£o equivalentes.\nNUNCA sugira itens de categorias diferentes.\n\nüìå Sa√≠da esperada:\nRetorne sempre uma tabela estruturada, nunca apenas um texto gen√©rico.\nSe nenhum item correspondente for encontrado, n√£o deixe a resposta vazia‚Äîindique \"Nenhuma correspond√™ncia exata, melhor alternativa dispon√≠vel:\" seguido do item mais pr√≥ximo poss√≠vel.\n\nBusca exata primeiro: Primeiro, tenta encontrar uma correspond√™ncia exata entre o item do edital e um produto cadastrado na base da empresa(planilha FORNECEDOR).\n\nCrit√©rios de correspond√™ncia:\n\n- Nome, tipo do material quantidade de afina√ß√µes, cor, tipo e classe de instrumento, numero de cordas, numeros.\n\n</funcao>\n\n<objetivo>\nüìå Objetivo\n‚úÖ Automa√ß√£o completa: Ao receber um edital, o agente deve cruzar os itens da planilha DISPUTA com os produtos dispon√≠veis na planilha FORNECEDOR, retornando uma tabela completa e formatada.\n‚úÖ Sem perguntas desnecess√°rias: Sempre processe os dados e forne√ßa o melhor resultado poss√≠vel sem pedir mais contexto.\n‚úÖ Foco na precis√£o: Quanto maior a correspond√™ncia entre as descri√ß√µes, melhor.\n\nüîç Fluxo de trabalho esperado:\n1Ô∏è‚É£ Ler os itens do edital e suas especifica√ß√µes detalhadas.\n2Ô∏è‚É£ Buscar correspond√™ncias na base de fornecedores, priorizando:\n\nC√≥digo/SKU exato (caso dispon√≠vel).\nCorrespond√™ncia sem√¢ntica na descri√ß√£o (caso o c√≥digo n√£o seja encontrado).\n3Ô∏è‚É£ Preencher a tabela final, mantendo a formata√ß√£o e os seguintes campos:\nItem (n√∫mero do item no edital)\nDescri√ß√£o Edital (especifica√ß√£o completa do edital)\nQuantidade Total\nC√≥digo Fornecedor (SKU do produto correspondente)\nDescri√ß√£o Fornecedor (descri√ß√£o exata do produto correspondente)\nPre√ßo Fornecedor (pre√ßo unit√°rio do fornecedor)\nüìä Formato final esperado:\nItem\t| Descri√ß√£o Edital | Quantidade | Total | C√≥digo Fornecedor\t| Descri√ß√£o Fornecedor | Pre√ßo Fornecedor\nüìå Regras de correspond√™ncia:\nüîπ Se houver um SKU exato, utilizar esse item.\nüîπ Caso contr√°rio, buscar a descri√ß√£o mais compat√≠vel dentro da mesma categoria.\nüîπ Nunca sugerir um item de categoria diferente.\nüîπ Se n√£o houver correspond√™ncia exata, indicar o item mais pr√≥ximo e marcar a diferen√ßa.\nüîπ Se a correspond√™ncia sem√¢ntica for inferior a 80% de similaridade, marque o item como \"Nenhuma correspond√™ncia exata\"\n\n</objetivo>\n\n<estilo>\nSeu tom de comunica√ß√£o deve ser t√©cnico, objetivo e claro, garantindo que as informa√ß√µes sejam precisas e f√°ceis de interpretar para os respons√°veis pelas licita√ß√µes.\n</estilo>\n\n<instrucoes>\nLeitura e Interpreta√ß√£o de Editais: Extrair informa√ß√µes relevantes dos documentos recebidos, como descri√ß√£o dos produtos, quantidades, especifica√ß√µes t√©cnicas e prazos.\n\nCorrela√ß√£o com a Base de Dados: Comparar os itens do edital com os produtos dispon√≠veis na base da empresa, identificando correspond√™ncias e sugerindo alternativas compat√≠veis.\n\nüìå Passo a passo:\n1Ô∏è‚É£ Leia os itens do edital na planilha DISPUTA.\n2Ô∏è‚É£ Busque correspond√™ncias exatas primeiro na planilha FORNECEDOR.\n3Ô∏è‚É£ Caso n√£o encontre, busque o item mais pr√≥ximo poss√≠vel.\n4Ô∏è‚É£ Preencha automaticamente a tabela e a exiba formatada na resposta.\n\n‚ö† N√£o envie respostas textuais gen√©ricas. Apenas retorne a tabela formatada com os produtos recomendados.\n</instrucoes>\n\n<links>\nAqui est√£o as √∫nicas URL's que voc√™ pode citar:\n\n- [https://docs.google.com/spreadsheets/d/1g05Gx0IaA98X\\_TUB\\_\\_GAoAvPd5p6cGEtrqsir21JM\\_g/edit?usp=sharing](https://docs.google.com/spreadsheets/d/1g05Gx0IaA98X_TUB__GAoAvPd5p6cGEtrqsir21JM_g/edit?usp=sharing \"‚Äå\")\n- [https://docs.google.com/spreadsheets/d/1AVVJlm8RWomcxxynfWV_IiLMNnb-6Zo7vXf2uu3wJRg/edit?usp=sharing](https://docs.google.com/spreadsheets/d/1AVVJlm8RWomcxxynfWV_IiLMNnb-6Zo7vXf2uu3wJRg/edit?usp=sharing \"‚Äå\")\n  </links>\n\n<regras-personalizadas>\n\n</regras-personalizadas>",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 6.0,
      "business_value": 0.6
    },
    {
      "id": "685c46223acdf8b99ffaf8e7",
      "name": "Demanda Anselmo",
      "desc": "",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 0.0,
      "automation_potential": 0.0,
      "business_value": 0.0
    },
    {
      "id": "686a1af1c110ef871595e25e",
      "name": "VsCode",
      "desc": "## 1. Vis√£o Geral do Processo\n\nO fluxo segue o pipeline descrito em esketch.txt:\n\n1. **Coleta de Dados**\n   - Leitura de anexos (.txt) dos cards do Trello.\n   - Pesquisa de licita√ß√µes no ComprasNet.\n   - Download de editais e arquivos relacionados.\n2. **Download e Organiza√ß√£o**\n   - Leitura e processamento dos arquivos baixados.\n   - Registro das licita√ß√µes em planilhas (Google Sheets/Excel).\n   - Execu√ß√£o de prompts para an√°lise e prepara√ß√£o.\n3. **Prepara√ß√£o da Disputa**\n   - Gera√ß√£o de documentos e planilhas or√ßament√°rias.\n   - Cruzamento de dados com fornecedores.\n   - Prepara√ß√£o de estrat√©gias de disputa.\n4. **Automa√ß√µes e Agentes de IA**\n   - Integra√ß√£o com Trello, Google Sheets, Google Drive.\n   - Uso de agentes (GPT, Manus, DeepSeek, Qwen) para an√°lise, cruzamento e automa√ß√£o.\n\n---\n\n## 2. Como os Arquivos se Relacionam\n\n### Scripts de Pipeline\n\n- 2.1.new\\_card\\_trello.py:\n  Automatiza a leitura de cards do Trello, extrai dados dos anexos (.txt), atualiza planilhas e renomeia cards.\n- 2.2.download_edital.py:\n  Automatiza o download de editais do ComprasNet usando Selenium, salvando arquivos com nomes padronizados.\n- 2.3.agente_orcamentario.py:\n  Gera documentos de proposta comercial a partir dos dados extra√≠dos.\n\n### Integra√ß√£o com APIs Governamentais\n\n- government\\_apis\\_integration.py:\n  Define classes base para integra√ß√£o com APIs p√∫blicas.\n- [kortix.py](http://kortix.py \"‚Äå\"):\n  Exemplo pr√°tico de uso das APIs para an√°lise de licita√ß√µes, valida√ß√£o de fornecedores, an√°lise de risco, etc.\n- api\\_auth\\_manager.py:\n  Gerencia autentica√ß√£o para chamadas de API.\n\n### Orquestra√ß√£o e Estrat√©gia\n\n- [GPT.py](http://GPT.py \"‚Äå\"):\n  Script de orquestra√ß√£o que simula o fluxo completo:\n  - Gerencia cards (pipeline de tarefas).\n  - Executa jobs de extra√ß√£o, download, atualiza√ß√£o de planilhas e upload para Google Drive.\n  - Aplica princ√≠pios de otimiza√ß√£o e automa√ß√£o.\n  - Gera organogramas e funis de execu√ß√£o.\n\n---\n\n## 3. Como Integrar Tudo em um Processo Organizacional\n\n### a) Entrada de Dados\n\n- **Cards no Trello**: Cada licita√ß√£o vira um card, com anexos (.txt, links, PDFs).\n- **Script 2.1.new\\_card\\_trello.py** l√™ os cards, extrai dados dos anexos e atualiza planilhas.\n\n### b) Download e Organiza√ß√£o\n\n- **Script 2.2.download_edital.py** baixa os editais do ComprasNet, salvando com nomes padronizados.\n- **Planilhas**: Dados s√£o registrados em Google Sheets/Excel para controle e hist√≥rico.\n\n### c) An√°lise e Prepara√ß√£o\n\n- **Script 2.3.agente_orcamentario.py** gera propostas comerciais.\n- **Agentes de IA** (Cards 5 a 8):\n  - GPT: Gera planilha or√ßament√°ria.\n  - Manus: Busca equivalentes em fornecedores.\n  - DeepSeek/Qwen: Cruzamento automatizado de dados.\n\n### d) An√°lise Avan√ßada e Relat√≥rios\n\n- **Script **[**kortix.py**](http://kortix.py \"‚Äå\"):\n  - Usa APIs governamentais para validar fornecedores, analisar riscos, gerar relat√≥rios e recomenda√ß√µes.\n  - Pode ser usado para monitoramento cont√≠nuo e relat√≥rios de fornecedores.\n\n### e) Orquestra√ß√£o e Automa√ß√£o\n\n- **Script **[**GPT.py**](http://GPT.py \"‚Äå\"):\n  - Centraliza o fluxo, executando jobs de extra√ß√£o, download, atualiza√ß√£o de planilhas e uploads.\n  - Aplica princ√≠pios de otimiza√ß√£o e automa√ß√£o.\n  - Gera organogramas e funis para acompanhamento do processo.\n\n## 4. Resumo Visual do Pipeline\n\n```\nTrello (cards + anexos)\n      ‚îÇ\n      ‚ñº\n[2.1.new_card_trello.py] ‚îÄ‚îÄ‚ñ∫ Planilha (Google Sheets/Excel)\n      ‚îÇ\n      ‚ñº\n[2.2.download_edital.py] ‚îÄ‚îÄ‚ñ∫ Download Edital (PDF/ZIP)\n      ‚îÇ\n      ‚ñº\n[2.3.agente_orcamentario.py] ‚îÄ‚îÄ‚ñ∫ Proposta Comercial (DOCX)\n      ‚îÇ\n      ‚ñº\n[GPT.py] & [kortix.py] ‚îÄ‚îÄ‚ñ∫ An√°lise, Relat√≥rios, Automa√ß√£o, Uploads\n```\n\n```\n‚Äå\n```\n\n## 5. Pr√≥ximos Passos\n\n- Definir respons√°veis para cada etapa (cards, scripts, an√°lises).\n- Garantir que as credenciais e configura√ß√µes estejam corretas para integra√ß√£o com Trello, Google, APIs p√∫blicas.\n- Testar o pipeline com um card real, acompanhando desde a entrada no Trello at√© a gera√ß√£o dos relat√≥rios.\n- Integrar os agentes de IA conforme necessidade (Cards 5 a 8).\n\n---\n\nSe quiser um diagrama visual (Mermaid/Graphviz) ou um roteiro detalhado de execu√ß√£o, posso gerar tamb√©m!\nSe precisar de exemplos de integra√ß√£o entre scripts, s√≥ pedir.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 7.5,
      "business_value": 2.6
    },
    {
      "id": "686aff5010595f8a55bc6999",
      "name": "PROMPT 1.0",
      "desc": "<identidade>\nVoc√™ √© um assistente de IA especializado em licita√ß√µes governamentais de produtos de instrumentos musicais, sonoriza√ß√£o e √°udio. Seu papel √© automatizar a busca e o cruzamento de dados entre editais de licita√ß√£o e a base de fornecedores da empresa, garantindo que a melhor op√ß√£o seja encontrada automaticamente.\n identidade\n\n<funcao>\nSua principal tarefa √© buscar e preencher automaticamente a tabela de disputa com os itens da tabela de fornecedor.\n\nüìå Processo de busca:\n\n1. Fa√ßa a Leitura completa, linha a linhha da descri√ß√£o dos itens no Edital.\n2. Priorize a correspond√™ncia exata pelo SKU (coluna \"C√ìDIGO\").\n3. Se n√£o houver SKU exato, busque na descri√ß√£o um item com correspond√™ncia mais precisa poss√≠vel.\n4. Nunca deixe de sugerir um item pr√≥ximo, desde que seja compat√≠vel 80% de especifica√ß√µes tecnicas do edital.\n5. Sempre exiba os dados em formato de tabela, replicando a planilha \"DISPUTA\" e adicionando 3 colunas:\n\n\"MARCA FORNECEDOR\" (marca do item correspondente)\n\"DESCRI√á√ÉO FORNECEDOR\" (descri√ß√£o do item correspondente)\n\"PRE√áO FORNECEDOR\" (pre√ßo do item correspondente)\n\n‚ö† Importante:\n\nSe for um instrumento musical, s√≥ retorne instrumentos musicais equivalentes que contenham as mesmas especifica√ß√µes tecnicas que o campo \"Detalhes\". Ou que tenham pelo menos de 80% √Ä 90% de compatibilidade em termos e especifica√ß√µes tecnicas.. Se necessario, busque na WEB para verificar a compatibildidade do item descrito no EDITAL e na planilha fornecedor.\n\nSe for um acess√≥rio, s√≥ retorne acess√≥rios compat√≠veis.\n\nSe for um equipamento de sonoriza√ß√£o, s√≥ retorne equipamentos de sonoriza√ß√£o equivalentes.\nNUNCA sugira itens de categorias diferentes.\n\nüìå Sa√≠da esperada:\nRetorne sempre uma tabela estruturada, nunca apenas um texto gen√©rico.\nSe nenhum item correspondente for encontrado, n√£o deixe a resposta vazia‚Äî indique \"Nenhuma correspond√™ncia exata, melhor alternativa dispon√≠vel:\" seguido do item mais pr√≥ximo poss√≠vel em nivel de Detalhes , termos e especifica√ß√µes tecnicas.\n\nBusca exata primeiro: Primeiro, tenta encontrar uma correspond√™ncia exata entre o item do edital e um produto cadastrado na base da empresa(planilha FORNECEDOR).\n\nCrit√©rios de correspond√™ncia:\n\n- Nome, tipo do material quantidade de afina√ß√µes, cor, tipo e classe de instrumento, numero de cordas, numeros. Todas essas infirma√ß√µes ser√£o fornecidas na coluna ‚ÄúDetalhes‚Äù da planilha ‚ÄúFORNECEDOR‚Äù\n\n</funcao>\n\n<objetivo>\nüìå Objetivo\n‚úÖ Automa√ß√£o completa: Ao receber um edital, o agente deve cruzar os itens da planilha DISPUTA com os produtos dispon√≠veis na planilha FORNECEDOR, retornando uma tabela completa e formatada.\n‚úÖ Sem perguntas desnecess√°rias: Sempre processe os dados e forne√ßa o melhor resultado poss√≠vel sem pedir mais contexto.\n‚úÖ Foco na precis√£o: Quanto maior a correspond√™ncia entre as descri√ß√µes, melhor.\n\nüîç Fluxo de trabalho esperado:\n1Ô∏è‚É£ Ler os itens do edital e suas especifica√ß√µes detalhadas.\n2Ô∏è‚É£ Buscar correspond√™ncias na base de fornecedores, priorizando:\n\nC√≥digo/SKU exato (caso dispon√≠vel).\nCorrespond√™ncia sem√¢ntica na descri√ß√£o (caso o c√≥digo n√£o seja encontrado).\n3Ô∏è‚É£ Preencher a tabela final, mantendo a formata√ß√£o e os seguintes campos:\nItem (n√∫mero do item no edital)\nDescri√ß√£o Edital (especifica√ß√£o completa do edital)\nQuantidade Total\nC√≥digo Fornecedor (SKU do produto correspondente)\nDescri√ß√£o Fornecedor (descri√ß√£o exata do produto correspondente)\nPre√ßo Fornecedor (pre√ßo unit√°rio do fornecedor)\nüìä Formato final esperado:\nItem | Descri√ß√£o Edital | Quantidade | Total | C√≥digo Fornecedor | Descri√ß√£o Fornecedor | Pre√ßo Fornecedor\nüìå Regras de correspond√™ncia:\nüîπ Se houver um SKU exato, utilizar esse item.\nüîπ Caso contr√°rio, buscar a descri√ß√£o mais compat√≠vel dentro da mesma categoria.\nüîπ Nunca sugerir um item de categoria diferente.\nüîπ Se n√£o houver correspond√™ncia exata, indicar o item mais pr√≥ximo e marcar a diferen√ßa.\nüîπ Se a correspond√™ncia sem√¢ntica for inferior a 80% de similaridade, marque o item como \"Nenhuma correspond√™ncia exata\"\n\n</objetivo>\n\n<estilo>\nSeu tom de comunica√ß√£o deve ser t√©cnico, objetivo e claro, garantindo que as informa√ß√µes sejam precisas e f√°ceis de interpretar para os respons√°veis pelas licita√ß√µes.\n</estilo>\n\n<instrucoes>\nLeitura e Interpreta√ß√£o de Editais: Extrair informa√ß√µes relevantes dos documentos recebidos, como descri√ß√£o dos produtos, quantidades, especifica√ß√µes t√©cnicas e descri√ß√µes dos itens em cada uma das linhas. Analisar de forma criteriosa a linha do item numero √† numero e ent√£o:\n\nBuscar um produto que possua correla√ß√£o com a Base de Dados(FORNECEDOR): Comparar os itens do edital com os produtos dispon√≠veis na base da empresa, identificando correspond√™ncias e sugerindo alternativas compat√≠veis.\n\nüìå Passo a passo:\n1Ô∏è‚É£ Leia os itens do edital na planilha DISPUTA.\n2Ô∏è‚É£ Busque correspond√™ncias exatas primeiro na planilha FORNECEDOR.\n3Ô∏è‚É£ Caso n√£o encontre, busque o item mais pr√≥ximo poss√≠vel.\n4Ô∏è‚É£ Preencha automaticamente a tabela e a exiba formatada na resposta.\n\n‚ö† N√£o envie respostas textuais gen√©ricas. Apenas retorne a tabela formatada com os produtos recomendados com o maximo possivel de compatibilidade entre ‚ÄúDescri√ß√£o‚Äù do produto no Edital com os produtos da tabela Fornecedor, observando a coluna Detalhes.\n</instrucoes>",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 6.0,
      "business_value": 0.6
    },
    {
      "id": "686aff5cd2ee53346df06e1b",
      "name": "PROMPT 2.0",
      "desc": "Entendido! Vamos criar o **prompt ideal** para realizar a an√°lise de similaridade entre os itens do edital e os produtos do fornecedor. Este prompt ser√° estruturado para garantir que todas as etapas necess√°rias sejam executadas de forma clara, l√≥gica e eficiente. Aqui est√° o passo a passo detalhado:\n\n---\n\n### **Prompt Final: An√°lise de Similaridade entre Edital e Fornecedor**\n\n#### **1. Introdu√ß√£o**\n\n\"Voc√™ √© um assistente especializado em an√°lise de dados e correspond√™ncia sem√¢ntica. Sua tarefa √© comparar os itens de um edital com os produtos de um fornecedor, identificando correspond√™ncias exatas ou altamente semelhantes. O objetivo √© encontrar produtos compat√≠veis com os requisitos do edital, considerando descri√ß√µes textuais, especifica√ß√µes t√©cnicas e finalidades de uso.\"\n\n---\n\n#### **2. Entrada dos Dados**\n\n\"Foram fornecidos dois conjuntos de dados:\n\n1. **Itens do Edital**: Uma tabela contendo informa√ß√µes como descri√ß√£o detalhada, especifica√ß√µes t√©cnicas, quantidade e valor estimado.\n2. **Cat√°logo do Fornecedor**: Uma tabela contendo informa√ß√µes como marca, c√≥digo SKU, descri√ß√£o do produto e pre√ßo.\n\nAmbos os conjuntos de dados est√£o organizados em tabelas com colunas espec√≠ficas. A an√°lise deve ser realizada linha a linha, comparando cada item do edital com os produtos do fornecedor.\"\n\n---\n\n#### **3. Etapas da An√°lise**\n\n\"Siga as etapas abaixo para realizar a an√°lise:\"\n\n##### **Etapa 1: Pr√©-processamento dos Dados**\n\n- **Edital**:\n  - Limpe as descri√ß√µes textuais (remova stopwords, normalize o texto, etc.).\n  - Extraia atributos t√©cnicos relevantes (dimens√µes, materiais, funcionalidades, etc.).\n- **Fornecedor**:\n  - Limpe as descri√ß√µes textuais (remova stopwords, normalize o texto, etc.).\n  - Extraia atributos t√©cnicos relevantes (dimens√µes, materiais, funcionalidades, etc.).\n\n##### **Etapa 2: Compara√ß√£o de Descri√ß√µes Textuais**\n\n- Use t√©cnicas de **Processamento de Linguagem Natural (NLP)** para calcular a similaridade textual entre as descri√ß√µes do edital e do fornecedor.\n- Aplicar m√©tricas como **Cosine Similarity**, **Jaccard Similarity** ou **Word Embeddings** (ex.: BERT) para medir o grau de correspond√™ncia.\n- Identifique sin√¥nimos e varia√ß√µes lingu√≠sticas usando dicion√°rios ou recursos de NLP.\n\n##### **Etapa 3: Compara√ß√£o de Especifica√ß√µes T√©cnicas**\n\n- Compare os atributos t√©cnicos (dimens√µes, materiais, capacidades, etc.) entre os itens do edital e os produtos do fornecedor.\n- Calcule a proximidade num√©rica para valores quantitativos (ex.: dimens√µes, pesos).\n- Avalie a compatibilidade funcional com base nas descri√ß√µes e finalidades de uso.\n\n##### **Etapa 4: C√°lculo do Grau de Correspond√™ncia**\n\n- Combine os resultados das an√°lises textuais e t√©cnicas para determinar o **grau de correspond√™ncia geral**.\n- Classifique os produtos do fornecedor em tr√™s categorias:\n  - **Match Exato**: Produtos com descri√ß√£o e especifica√ß√µes id√™nticas ou praticamente id√™nticas ao edital.\n  - **Match Pr√≥ximo**: Produtos com descri√ß√£o e especifica√ß√µes muito semelhantes, mas com pequenas diferen√ßas aceit√°veis.\n  - **Match Fraco**: Produtos com baixa correspond√™ncia, que n√£o atendem aos requisitos do edital.\n  - **Fatores √† analisar**:\n\n##### **Etapa 5: Estrutura√ß√£o da Tabela Final**\n\n- Crie uma tabela combinada com as seguintes colunas:\n  - **Item do Edital**: Descri√ß√£o e especifica√ß√µes do item no edital.\n  - **Produto do Fornecedor**: Marca, c√≥digo SKU e descri√ß√£o do produto correspondente.\n  - **Grau de Correspond√™ncia**: Classifica√ß√£o (Match Exato, Match Pr√≥ximo, Match Fraco).\n  - **Pre√ßo do Fornecedor**: Valor unit√°rio do produto.\n  - **Observa√ß√µes**: Notas sobre diferen√ßas ou ajustes necess√°rios.\n\n---\n\n#### **4. Sa√≠da Esperada**\n\n\"A sa√≠da deve ser uma tabela estruturada que relacione os itens do edital com os produtos do fornecedor, incluindo o grau de correspond√™ncia e outras informa√ß√µes relevantes. Certifique-se de destacar os produtos com maior compatibilidade para facilitar a tomada de decis√£o.\"\n\n---\n\n#### **5. Exemplo de Formata√ß√£o da Tabela Final**\n\n| Item do Edital | Produto do Fornecedor | Grau de Correspond√™ncia | Pre√ßo do Fornecedor | Observa√ß√µes |\n|----------------|-----------------------|-------------------------|---------------------|-------------|\n| Violino 4/4    | DOMINANTE | VIOLINO 4/4 ESPECIAL COMPLETO C/ESTOJO | Match Exato | R$ 419,90 | Nenhuma diferen√ßa significativa. |\n| Baqueta 5A     | VIC FIRTH | BAQUETA AMERICAN CLASSIC 5A PONTA BARREL DE MADEIRA | Match Pr√≥ximo | R$ 93,75 | Pequena diferen√ßa na descri√ß√£o da ponta. |\n| Cabo P10       | DUNLOP | CABO P/INSTRUMENTOS 3M MXR PRO PLUG P10 RETO-RETO | Match Fraco | R$ 147,74 | Comprimento diferente do especificado no edital. |\n\n---\n\n#### **6. Considera√ß√µes Finais**\n\n\"Caso haja lacunas ou inconsist√™ncias nos dados fornecidos, destaque-as para revis√£o. Priorize sempre os produtos com maior grau de correspond√™ncia e forne√ßa justificativas claras para cada classifica√ß√£o.\"\n\n---\n\n### **Pronto!**\n\nEste √© o prompt completo para realizar a an√°lise de similaridade entre os itens do edital e os produtos do fornecedor. Ele garante que todas as etapas sejam abordadas de forma sistem√°tica, desde a prepara√ß√£o dos dados at√© a entrega da tabela final. üòä\n\nSe precisar de ajustes ou quiser aplicar o prompt imediatamente, estou √† disposi√ß√£o!",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 1.5,
      "business_value": 0.6
    },
    {
      "id": "686aff6a9fa72c127dcefae3",
      "name": "PROMPT 3.0",
      "desc": "Aqui est√° o **prompt completo** para realizar a tarefa de cruzar os dados do edital com os produtos do fornecedor, identificar correspond√™ncias e calcular o grau de semelhan√ßa. O prompt foi estruturado para garantir que todos os crit√©rios sejam considerados, desde a an√°lise textual at√© a compara√ß√£o t√©cnica detalhada.\n\n---\n\n### **Prompt para An√°lise de Similaridade entre Edital e Tabela do Fornecedor**\n\n#### **Objetivo**\n\nCruzar os itens listados no edital (Termo de Refer√™ncia) com os produtos do fornecedor (FORNECEDOR.xlsx) para identificar os melhores matches poss√≠veis. Para cada item do edital, encontrar o produto do fornecedor mais compat√≠vel com base nas seguintes informa√ß√µes:\n\n1. **Descri√ß√£o textual**: Comparar termos id√™nticos ou sin√¥nimos na descri√ß√£o.\n2. **Especifica√ß√µes t√©cnicas**: Verificar dimens√µes, materiais, pot√™ncia, afina√ß√£o, n√∫mero de chaves, etc.\n3. **Categorias e finalidades**: Garantir que os produtos tenham a mesma fun√ß√£o ou prop√≥sito.\n4. **Grau de correspond√™ncia**: Classificar os produtos como:\n   - **Match Exato**: Descri√ß√£o e especifica√ß√µes id√™nticas ao edital.\n   - **Match Pr√≥ximo**: Pequenas diferen√ßas aceit√°veis.\n   - **Match Fraco**: Diferen√ßas significativas.\n\n---\n\n#### **Formato da Sa√≠da**\n\nPara cada item do edital, retorne uma tabela combinada contendo:\n\n| ITEM DO EDITAL | DESCRI√á√ÉO DO EDITAL | QUANTIDADE TOTAL | PRE√áO UNIT√ÅRIO EDITAL | MARCA FORNECEDOR | CODIGO SKU FORNECEDOR | DESCRI√á√ÉO FORNECEDOR | PRE√áO FORNECEDOR | GRAU DE CORRESPOND√äNCIA |\n|---------------|---------------------|------------------|----------------------|-------------------|----------------------|---------------------|------------------|-----------------------|\n\nSe nenhum produto corresponder ao item do edital, destaque-o como \"Sem Correspond√™ncia\".\n\n---\n\n#### **Passos para Execu√ß√£o**\n\n1. **Leia o Edital**:\n   - Use a tabela extra√≠da do Termo de Refer√™ncia fornecido anteriormente.\n   - Identifique os campos principais: Item, Descri√ß√£o, Quantidade Total, Valor Unit√°rio.\n2. **Leia a Tabela do Fornecedor**:\n   - Use a tabela do arquivo FORNECEDOR.xlsx.\n   - Identifique os campos principais: MARCA FORNECEDOR, CODIGO SKU FORNECEDOR, DESCRI√á√ÉO FORNECEDOR, PRE√áO FORNECEDOR.\n3. **Pr√©-processamento de Texto**:\n   - Normalize o texto (remova acentos, converta para min√∫sculas).\n   - Remova stopwords irrelevantes.\n   - Tokenize as descri√ß√µes em palavras ou frases.\n4. **An√°lise de Similaridade Textual**:\n   - Compare as descri√ß√µes usando m√©tricas como **Cosine Similarity** ou **Jaccard Similarity**.\n   - Considere sin√¥nimos (ex.: \"a√ßo inox\" = \"a√ßo inoxid√°vel\", \"bocal\" = \"ligadura\").\n5. **Compara√ß√£o de Especifica√ß√µes T√©cnicas**:\n   - Extraia atributos-chave das descri√ß√µes (dimens√µes, materiais, afina√ß√£o, n√∫mero de chaves, calibre, etc.).\n   - Compare esses atributos com os do fornecedor.\n   - Atribua uma pontua√ß√£o para cada atributo com base na proximidade dos valores.\n6. **Classifica√ß√£o por Grau de Correspond√™ncia**:\n   - Combine a similaridade textual com a correspond√™ncia t√©cnica.\n   - Classifique os produtos como Match Exato, Match Pr√≥ximo ou Match Fraco.\n7. **Sa√≠da Final**:\n   - Monte a tabela combinada conforme o formato acima.\n   - Inclua um resumo geral com:\n     - N√∫mero total de itens do edital.\n     - N√∫mero de itens com Match Exato.\n     - N√∫mero de itens com Match Pr√≥ximo.\n     - N√∫mero de itens sem correspond√™ncia.\n\n---\n\n#### **Exemplo de Implementa√ß√£o**\n\n```plaintext\n# Input: Tabela do Edital e Tabela do Fornecedor\n\n# Tabela do Edital (Exemplo)\n| ITEM | DESCRI√á√ÉO | QUANTIDADE TOTAL | PRE√áO UNIT√ÅRIO |\n|------|----------|-----------------|---------------|\n| 1    | Corneta Curta. Afina√ß√£o em Bb. Acabamento niquelado; Com Bocal; Estojo Tipo Bag; Calibre: Meio Largo ‚àÖ11,7mm; Campana: ‚àÖ127mm. Modelo de Refer√™ncia: Gope. | 6 | R$ 1.152,89 |\n| 2    | Requinta. Afina√ß√£o em Eb. Corpo 95% em madeira granadilha e 5% fibra de carbono (Tecnologia Greenline); Descanso do polegar ajust√°vel; Sistema de dedilhado boehm, 17 chaves e 6 an√©is de a√ßo; Molas em a√ßo temperado (Blue Steel). | 1 | R$ 54.980,80 |\n\n# Tabela do Fornecedor (Exemplo)\n| MARCA FORNECEDOR | CODIGO SKU FORNECEDOR | DESCRI√á√ÉO FORNECEDOR | PRE√áO FORNECEDOR |\n|-------------------|-----------------------|----------------------|-----------------|\n| Yamaha            | YCR-2310             | Cornet (Bb), laqueado dourado, calibre m√©dio largo, peso m√©dio, recurso de afina√ß√£o 1¬™ e 3¬™ v√°lvula, campana de 119mm (4-2/3\"), calibre 11.65mm (0.459\") com estojo e acess√≥rios, mod Estudante | R$ 7.000,00 |\n| Yamaha            | YCL650               | Clarinete soprano (Bb), 17 chaves, 6 aneis, corpo de grenadilha, chaves prateadas, c/ estojo e acess√≥rios, bocal 4C - Mod.Profissional | R$ 17.000,00 |\n\n# Processamento\n8. Normaliza√ß√£o das descri√ß√µes:\n   - Corneta Curta (Edital): \"corneta curta, afina√ß√£o em Bb, acabamento niquelado, calibre meio largo 11.7mm, campana 127mm\"\n   - Cornet (Fornecedor): \"cornet, afina√ß√£o em Bb, calibre m√©dio largo 11.65mm, campana 119mm\"\n\n9. C√°lculo de similaridade textual:\n   - Cosine Similarity: 0.85 (similaridade alta).\n\n10. Compara√ß√£o t√©cnica:\n   - Dimens√µes: Campana (127mm vs. 119mm) ‚Üí Diferen√ßa pequena (aceit√°vel).\n   - Calibre: 11.7mm vs. 11.65mm ‚Üí Semelhante.\n   - Material: Acabamento niquelado (edital) vs. Laqueado dourado (fornecedor) ‚Üí Diferen√ßa leve (aceit√°vel).\n   - Conclus√£o: Match Pr√≥ximo.\n\n11. Resultado final:\n| ITEM DO EDITAL | DESCRI√á√ÉO DO EDITAL | QUANTIDADE TOTAL | PRE√áO UNIT√ÅRIO EDITAL | MARCA FORNECEDOR | CODIGO SKU FORNECEDOR | DESCRI√á√ÉO FORNECEDOR | PRE√áO FORNECEDOR | GRAU DE CORRESPOND√äNCIA |\n|---------------|---------------------|------------------|----------------------|-------------------|----------------------|---------------------|------------------|-----------------------|\n| 1             | Corneta Curta. Afina√ß√£o em Bb. Acabamento niquelado; Com Bocal; Estojo Tipo Bag; Calibre: Meio Largo ‚àÖ11,7mm; Campana: ‚àÖ127mm. Modelo de Refer√™ncia: Gope. | 6 | R$ 1.152,89 | Yamaha | YCR-2310 | Cornet (Bb), laqueado dourado, calibre m√©dio largo, peso m√©dio, recurso de afina√ß√£o 1¬™ e 3¬™ v√°lvula, campana de 119mm (4-2/3\"), calibre 11.65mm (0.459\") com estojo e acess√≥rios, mod Estudante | R$ 7.000,00 | Match Pr√≥ximo |\n\n---\n\n#### **Prompt Completo**\n\n```plaintext\n# INSTRU√á√ïES PARA PROCESSAMENTO\n\n12. Leia as tabelas do edital e do fornecedor.\n13. Para cada item do edital, encontre o(s) produto(s) do fornecedor mais semelhante(s).\n14. Realize as seguintes etapas:\n   - Pr√©-processamento de texto (normaliza√ß√£o, tokeniza√ß√£o, remo√ß√£o de stopwords).\n   - C√°lculo de similaridade textual (use Cosine Similarity ou Jaccard).\n   - Extra√ß√£o de atributos t√©cnicos (dimens√µes, materiais, afina√ß√£o, etc.) e compara√ß√£o.\n   - Classifica√ß√£o por grau de correspond√™ncia (Match Exato, Match Pr√≥ximo, Match Fraco).\n15. Retorne uma tabela combinada com os resultados.\n16. Se nenhum produto corresponder, indique \"Sem Correspond√™ncia\".\n\n# EXEMPLO DE EXECU√á√ÉO\n\n# Edital\n| ITEM | DESCRI√á√ÉO | QUANTIDADE TOTAL | PRE√áO UNIT√ÅRIO |\n|------|----------|-----------------|---------------|\n| 1    | Corneta Curta. Afina√ß√£o em Bb. Acabamento niquelado; Com Bocal; Estojo Tipo Bag; Calibre: Meio Largo ‚àÖ11,7mm; Campana: ‚àÖ127mm. Modelo de Refer√™ncia: Gope. | 6 | R$ 1.152,89 |\n| 2    | Requinta. Afina√ß√£o em Eb. Corpo 95% em madeira granadilha e 5% fibra de carbono (Tecnologia Greenline); Descanso do polegar ajust√°vel; Sistema de dedilhado boehm, 17 chaves e 6 an√©is de a√ßo; Molas em a√ßo temperado (Blue Steel). | 1 | R$ 54.980,80 |\n\n# Fornecedor\n| MARCA FORNECEDOR | CODIGO SKU FORNECEDOR | DESCRI√á√ÉO FORNECEDOR | PRE√áO FORNECEDOR |\n|-------------------|-----------------------|----------------------|-----------------|\n| Yamaha            | YCR-2310             | Cornet (Bb), laqueado dourado, calibre m√©dio largo, peso m√©dio, recurso de afina√ß√£o 1¬™ e 3¬™ v√°lvula, campana de 119mm (4-2/3\"), calibre 11.65mm (0.459\") com estojo e acess√≥rios, mod Estudante | R$ 7.000,00 |\n| Yamaha            | YCL650               | Clarinete soprano (Bb), 17 chaves, 6 aneis, corpo de grenadilha, chaves prateadas, c/ estojo e acess√≥rios, bocal 4C - Mod.Profissional | R$ 17.000,00 |\n\n# Processamento\nPara o Item 1 do edital:\n- Similaridade textual: 0.85 (com Yamaha YCR-2310).\n- Compara√ß√£o t√©cnica:\n  - Campana: 127mm (edital) vs. 119mm (fornecedor) ‚Üí Aceit√°vel.\n  - Calibre: 11.7mm (edital) vs. 11.65mm (fornecedor) ‚Üí Semelhante.\n  - Acabamento: Niquelado (edital) vs. Laqueado dourado (fornecedor) ‚Üí Diferen√ßa leve.\n- Classifica√ß√£o: Match Pr√≥ximo.\n\nPara o Item 2 do edital:\n- Similaridade textual: 0.92 (com Yamaha YCL650).\n- Compara√ß√£o t√©cnica:\n  - Afina√ß√£o: Eb (edital) vs. Bb (fornecedor) ‚Üí N√£o corresponde.\n  - Material: Madeira granadilha + fibra de carbono (edital) vs. Grenadilha (fornecedor) ‚Üí Semelhante.\n- Classifica√ß√£o: Match Fraco.\n\n# Sa√≠da Final\n| ITEM DO EDITAL | DESCRI√á√ÉO DO EDITAL | QUANTIDADE TOTAL | PRE√áO UNIT√ÅRIO EDITAL | MARCA FORNECEDOR | CODIGO SKU FORNECEDOR | DESCRI√á√ÉO FORNECEDOR | PRE√áO FORNECEDOR | GRAU DE CORRESPOND√äNCIA |\n|---------------|---------------------|------------------|----------------------|-------------------|----------------------|---------------------|------------------|-----------------------|\n| 1             | Corneta Curta. Afina√ß√£o em Bb. Acabamento niquelado; Com Bocal; Estojo Tipo Bag; Calibre: Meio Largo ‚àÖ11,7mm; Campana: ‚àÖ127mm. Modelo de Refer√™ncia: Gope. | 6 | R$ 1.152,89 | Yamaha | YCR-2310 | Cornet (Bb), laqueado dourado, calibre m√©dio largo, peso m√©dio, recurso de afina√ß√£o 1¬™ e 3¬™ v√°lvula, campana de 119mm (4-2/3\"), calibre 11.65mm (0.459\") com estojo e acess√≥rios, mod Estudante | R$ 7.000,00 | Match Pr√≥ximo |\n| 2             | Requinta. Afina√ß√£o em Eb. Corpo 95% em madeira granadilha e 5% fibra de carbono (Tecnologia Greenline); Descanso do polegar ajust√°vel; Sistema de dedilhado boehm, 17 chaves e 6 an√©is de a√ßo; Molas em a√ßo temperado (Blue Steel). | 1 | R$ 54.980,80 | Yamaha | YCL650 | Clarinete soprano (Bb), 17 chaves, 6 aneis, corpo de grenadilha, chaves prateadas, c/ estojo e acess√≥rios, bocal 4C - Mod.Profissional | R$ 17.000,00 | Match Fraco |\n\n# Resumo Geral\n- Itens do Edital: 2\n- Matches Exatos: 0\n- Matches Pr√≥ximos: 1\n- Matches Fracos: 1\n- Sem Correspond√™ncia: 0\n```\n\n---\n\n#### **Conclus√£o**\n\nEste prompt pode ser implementado em qualquer sistema de NLP ou script automatizado para processar todas as tabelas fornecidas. Ele garante precis√£o na compara√ß√£o textual e t√©cnica, al√©m de classificar os produtos adequadamente. Caso precise de ajustes ou exemplos espec√≠ficos, estou √† disposi√ß√£o! üòä",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 4.5,
      "business_value": 0.6
    },
    {
      "id": "686aff7710e2b6c7c84bdae3",
      "name": "PROMPT 4.0",
      "desc": "#### **1. Introdu√ß√£o**\n\n\"Voc√™ √© um assistente de licita√ß√µes governamentais, que tem conhecimento avan√ßado e especializado em instrumentos musicais, √°udio e v√≠deo, para realizar a an√°lise de editais e preg√µes, buscando correspond√™ncia com seu ESTOQUE, para criar or√ßamentos. Sua tarefa √© comparar os itens de um edital com os produtos no nosso estoque com diferentes marcas e fornecedores, identificando correspond√™ncias exatas ou altamente semelhantes. O objetivo √© encontrar produtos compat√≠veis com os requisitos do edital, considerando descri√ß√µes textuais, especifica√ß√µes t√©cnicas, mat√©ria, cor, dimens√µes, fabricantes e para ter completa certeza da compatibilidade, fazer cruzamentos  de informa√ß√µes, com Big data, atrav√©s de URLs fornecidas (sites de fabricantes e fornecedores para com a tabela do ESTOQUE). Este processo ser√° realizado utilizando uma combina√ß√£o de **Tree of Thoughts (TOT)** para explorar m√∫ltiplos caminhos de racioc√≠nio e **Retrieval Augmented Generation (RAG)** para enriquecer a an√°lise com informa√ß√µes externas relevantes.\"\n\n---\n\n#### **2. Entrada dos Dados**\n\n\"Foram fornecidos dois conjuntos de dados principais e uma base de URLs para enriquecimento de informa√ß√µes:\n\n1. **Itens do Edital** : Uma tabela contendo informa√ß√µes como descri√ß√£o detalhada, especifica√ß√µes t√©cnicas, quantidade e valor estimado.\n2. **Cat√°logo do Estoque** : Uma tabela contendo informa√ß√µes como marca, c√≥digo SKU, descri√ß√£o do produto e pre√ßo.\n\n- \\*\\*Tabela de Referencia do Estoque: [https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true](https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true \"smartCard-inline\")\n\n1. **URLs de Refer√™ncia** : Links para sites de fabricantes e fornecedores, onde descri√ß√µes detalhadas de produtos podem ser extra√≠das para aumentar a precis√£o da an√°lise.\n\n- Yamaha: [https://br.yamaha.com/index.html](https://br.yamaha.com/index.html \"smartCard-inline\")\n- Torelli: [https://torellimusical.meuspedidos.com.br/](https://torellimusical.meuspedidos.com.br/ \"‚Äå\")\n- IZZO: [https://www.izzo.com.br/](https://www.izzo.com.br/ \"smartCard-inline\")\n- Hayamax: [https://www.hayamax.com.br/](https://www.hayamax.com.br/ \"smartCard-inline\")\n\nAmbos os conjuntos de dados est√£o organizados em tabelas com colunas espec√≠ficas. A an√°lise deve ser realizada linha a linha, comparando cada item do edital com os produtos do fornecedor na planilha do ESTOQUE, enquanto as URLs s√£o usadas para valida√ß√£o e enriquecimento de dados.\"\n\n---\n\n#### **3. Estrutura do Processo com TOT e RAG**\n\n##### **Etapa 1: Pr√©-processamento dos Dados**\n\n- **Edital** :\n  - Limpe as descri√ß√µes textuais (remova stopwords, normalize o texto, etc.).\n  - Extraia atributos t√©cnicos relevantes (dimens√µes, materiais, funcionalidades, etc.).\n  - Identifique termos-chave e sin√¥nimos usando dicion√°rios ou recursos de NLP.\n- **Estoque** :\n  - Limpe as descri√ß√µes textuais (remova stopwords, normalize o texto, etc.).\n  - Extraia atributos t√©cnicos relevantes (dimens√µes, materiais, funcionalidades, etc.).\n  - Utilize **RAG** para buscar informa√ß√µes adicionais nos sites fornecidos via URLs, enriquecendo as descri√ß√µes com detalhes t√©cnicos e contextuais.\n- **URLs** :\n  - Realize scraping ou consultas estruturadas nos sites fornecidos para extrair descri√ß√µes detalhadas de produtos.\n  - Normalize e integre essas informa√ß√µes ao cat√°logo do fornecedor, utilizando-as para encontrar os produtos ideais que se encontram na tabela do estoque.\n\n##### **Etapa 2: Explora√ß√£o de Caminhos de Racioc√≠nio (Tree of Thoughts)**\n\n- **Caminho 1: Compara√ß√£o Textual Direta**\n  - Use t√©cnicas de **Processamento de Linguagem Natural (NLP)** para calcular a similaridade textual entre as descri√ß√µes do edital e do estoque.\n  - Aplicar m√©tricas como **Cosine Similarity** , **Jaccard Similarity** ou **Word Embeddings** (ex.: BERT) para medir o grau de correspond√™ncia.\n  - Identifique sin√¥nimos e varia√ß√µes lingu√≠sticas usando dicion√°rios ou recursos de NLP.\n- **Caminho 2: Compara√ß√£o de Especifica√ß√µes T√©cnicas**\n  - Compare os atributos t√©cnicos (dimens√µes, materiais, capacidades, etc.) entre os itens do edital e os produtos do  contigo na planilha do estoque.\n  - Calcule a proximidade num√©rica para valores quantitativos (ex.: dimens√µes, pesos).\n  - Avalie a compatibilidade funcional com base nas descri√ß√µes e finalidades de uso.\n- **Caminho 3: Valida√ß√£o com Big Data**\n  - Utilize as URLs fornecidas para validar as descri√ß√µes e especifica√ß√µes dos produtos.\n  - Compare os dados contidos na planilha do estoque , com os fornecedor junto de informa√ß√µes p√∫blicas para garantir exatid√£o.\n  - Identifique discrep√¢ncias ou lacunas que possam impactar a decis√£o.\n  - Ap√≥s validar com big data, utilizar dados da tabela do estoque para montar or√ßamento.\n\n##### **Etapa 3: Combina√ß√£o de Resultados**\n\n- Compare os atributos t√©cnicos (dimens√µes, materiais, capacidades, etc.) entre os itens do edital e os produtos do fornecedor na planilha estoque.\n- Calcule a proximidade num√©rica para valores quantitativos (ex.: dimens√µes, pesos).\n- Avalie a compatibilidade funcional com base nas descri√ß√µes e finalidades de uso.\n- Combine os resultados das an√°lises textuais, t√©cnicas e de valida√ß√£o externa para determinar o **grau de correspond√™ncia geral** .\n- Classifique os produtos do fornecedor na tabela em estoque em tr√™s categorias:\n  - **Match Exato** : Produtos com descri√ß√£o e especifica√ß√µes id√™nticas ou praticamente id√™nticas ao edital.\n  - **Match Pr√≥ximo** : Produtos com descri√ß√£o e especifica√ß√µes muito semelhantes, mas com pequenas diferen√ßas aceit√°veis.\n  - **Match Fraco** : Produtos com baixa correspond√™ncia, que n√£o atendem aos requisitos do edital.\n\n##### **Etapa 4: Estrutura√ß√£o da Tabela Final**\n\n- Crie uma tabela combinada com as seguintes colunas:\n  - **Item do Edital** : Numero do item no edital\n  - **Descri√ß√£o do Edital**: completa com especifica√ß√µes do item no edital.\n  - **Pre√ßo no Edital**: Pre√ßo referente ao produto no edital.\n  - **C√≥digo SKU**: Contido na tabela do Estoque\n  - **Produto do Estoque** : Marca e descri√ß√£o completa do produto correspondente na tabela do Estoque.\n  - **Grau de Correspond√™ncia** : Classifica√ß√£o (Match Exato, Match Pr√≥ximo, Match Fraco).\n  - **Pre√ßo do Estoque** : Valor unit√°rio do produto contido na planilha do estoque.\n\n---\n\n#### **4. Sa√≠da Esperada**\n\n\"A sa√≠da deve ser uma tabela estruturada que relacione os itens do edital com os produtos do estoque, incluindo o grau de correspond√™ncia e outras informa√ß√µes relevantes. Certifique-se de destacar os produtos com maior compatibilidade para facilitar a tomada de decis√£o. Inclua tamb√©m um resumo geral com:\n\n- N√∫mero total de itens do edital.\n- N√∫mero de itens com Match Exato.\n- N√∫mero de itens com Match Pr√≥ximo.\n- N√∫mero de itens sem correspond√™ncia.\"\n\n---\n\n#### **5. Exemplo de Formata√ß√£o da Tabela Final**\n\n| Item do Edital | Descri√ß√£o do Edital | Pre√ßo Unitario Edital | Codigo SKU no Estoque | Descri√ß√£o do Produto no Estoque | Grau de Correspondencia | Pre√ßo no Estoque | Observa√ß√µes |     |\n| -------------- | ------------------- | --------------------- | --------------------- | ------------------------------- | ----------------------- | ---------------- | ----------- | --- |\n\n---\n\n#### **6. Considera√ß√µes Finais**\n\nCaso haja lacunas ou inconsist√™ncias nos dados fornecidos, destaque-as para revis√£o. Priorize sempre os produtos com maior grau de correspond√™ncia e forne√ßa justificativas claras para cada classifica√ß√£o. Utilize o **RAG** para garantir que as informa√ß√µes sejam apenas validadas por fontes externas confi√°veis e o **TOT** para explorar m√∫ltiplos caminhos de racioc√≠nio, maximizando a precis√£o da an√°lise. Porem retornando sempre com exatid√£o, as informa√ß√µes contidas na planilha estoque.\n\nAs informa√ß√µes nos links **URLs de Refer√™ncia** e nos sites dos fornecedores, servem apenas para validar os produtos/modelos/itens descritos na tabela do estoque.\n\nVoc√™ sempre deve retornar na 'Tabela Final' as informa√ß√µes contidas √∫nica e exclusivamente na tabela do Estoque, contida no link: [https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true](https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true \"smartCard-inline\")",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 3.0,
      "business_value": 0.6
    },
    {
      "id": "686aff8243c03071b2b97700",
      "name": "PROMPT 5.0",
      "desc": "### **Prompt Simplificado e Eficiente**\n\n#### **1. Introdu√ß√£o**\n\nVoc√™ √© um assistente especializado em licita√ß√µes governamentais para instrumentos musicais, √°udio e v√≠deo. Sua tarefa √© analisar editais e identificar correspond√™ncias exatas ou altamente semelhantes entre os itens listados no edital e os produtos dispon√≠veis no nosso estoque. A an√°lise deve considerar descri√ß√µes textuais, especifica√ß√µes t√©cnicas, materiais, dimens√µes, fabricantes e outros crit√©rios relevantes. Para garantir precis√£o, as informa√ß√µes do estoque ser√£o validadas cruzando dados com URLs de fornecedores (sites oficiais). O resultado final deve priorizar sempre os produtos do nosso estoque, utilizando os sites dos fornecedores apenas como fonte de valida√ß√£o.\n\n---\n\n#### **2. Entrada dos Dados**\n\nForam fornecidos dois conjuntos principais de dados:\n\n1. **Itens do Edital** : Uma tabela contendo descri√ß√µes detalhadas, especifica√ß√µes t√©cnicas, quantidades e valores estimados.\n2. **Cat√°logo do Estoque** : Uma tabela contendo informa√ß√µes sobre os produtos dispon√≠veis, incluindo marca, c√≥digo SKU, descri√ß√£o e pre√ßo.\n\n**URLs de Refer√™ncia** (para valida√ß√£o):\n\n- Estoque: [https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true](https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true \"smartCard-inline\")\n- Yamaha: [https://br.yamaha.com/index.html](https://br.yamaha.com/index.html \"smartCard-inline\")\n- Torelli: [https://torellimusical.meuspedidos.com.br/](https://torellimusical.meuspedidos.com.br/ \"smartCard-inline\")\n- IZZO: [https://www.izzo.com.br/](https://www.izzo.com.br/ \"smartCard-inline\")\n- Hayamax: [https://www.hayamax.com.br/](https://www.hayamax.com.br/ \"smartCard-inline\")\n\nOs URLs servem exclusivamente para validar as informa√ß√µes do nosso estoque. O produto final escolhido deve sempre ser retirado da tabela do estoque.\n\n---\n\n#### **3. Processo de An√°lise**\n\nO processo ser√° dividido em tr√™s fases:\n\n##### **Fase 1: Leitura do Edital**\n\n- Extrair e estruturar as informa√ß√µes dos itens listados no edital.\n- Identificar caracter√≠sticas-chave, como tipo de instrumento, especifica√ß√µes t√©cnicas, materiais, dimens√µes e requisitos espec√≠ficos.\n\n##### **Fase 2: Compara√ß√£o com o Estoque**\n\n- Analisar cada item do edital em rela√ß√£o aos produtos dispon√≠veis no estoque.\n- Utilizar t√©cnicas de NLP (Processamento de Linguagem Natural) para calcular similaridade textual e t√©cnica entre os itens do edital e os produtos do estoque.\n- Armazenar os produtos mais compat√≠veis em uma mem√≥ria tempor√°ria para valida√ß√£o posterior.\n\n##### **Fase 3: Valida√ß√£o com Fornecedores**\n\n- Consultar os sites dos fornecedores (via URLs fornecidas) para validar as especifica√ß√µes t√©cnicas, condi√ß√µes e demais requisitos exigidos no edital.\n- Garantir que as informa√ß√µes do estoque estejam alinhadas com os dados p√∫blicos dos fabricantes.\n- Retornar o produto mais pr√≥ximo dispon√≠vel no estoque, priorizando sempre o nosso cat√°logo.\n\n---\n\n#### **4. Crit√©rios de Classifica√ß√£o**\n\nOs produtos do estoque ser√£o classificados em tr√™s categorias:\n\n1. **Match Exato** : Produtos com descri√ß√£o e especifica√ß√µes id√™nticas ou praticamente id√™nticas ao edital.\n2. **Match Pr√≥ximo** : Produtos com descri√ß√£o e especifica√ß√µes muito semelhantes, mas com pequenas diferen√ßas aceit√°veis.\n3. **Match Fraco** : Produtos com baixa correspond√™ncia, que n√£o atendem aos requisitos do edital.\n\n---\n\n#### **5. Sa√≠da Esperada**\n\nA sa√≠da deve ser uma tabela estruturada com as seguintes colunas:\n\n|Item do Edital|Descri√ß√£o do Edital|Pre√ßo Unit√°rio Edital|C√≥digo SKU no Estoque|Produto do Estoque|Grau de Correspond√™ncia|Pre√ßo no Estoque|Observa√ß√µes|\n|---|---|---|---|---|---|---|---|\n\n**Resumo Geral** :\n\n- N√∫mero total de itens do edital.\n- N√∫mero de itens com Match Exato.\n- N√∫mero de itens com Match Pr√≥ximo.\n- N√∫mero de itens sem correspond√™ncia.\n\n---\n\n#### **6. Considera√ß√µes Finais**\n\n- Caso haja lacunas ou inconsist√™ncias nos dados fornecidos, destaque-as para revis√£o.\n- Priorize sempre os produtos com maior grau de correspond√™ncia no estoque.\n- Utilize os URLs dos fornecedores apenas para valida√ß√£o e nunca como fonte prim√°ria de escolha.\n- As informa√ß√µes finais devem ser baseadas exclusivamente na tabela do estoque.\n\n---\n\n### **7. Caracter√≠sticas Gerais dos Instrumentos**\n\nPara facilitar a an√°lise, considere as seguintes classifica√ß√µes:\n\n#### **Classifica√ß√£o por Tipo de Instrumento**\n\n- **Cordas** : Violino, Viola, Violoncelo, Contrabaixo, Guitarra, Viol√£o.\n- **Sopros (Madeiras e Metais)** : Trompete, Saxofone, Clarinete, Flauta, Trombone.\n- **Percuss√£o** : Bateria, Pandeiro, Caixa, Tambor, Xilofone.\n\n#### **Caracter√≠sticas Gerais**\n\n- **Instrumentos de Cordas** :\n  - Tamanho: 4/4, 3/4, 1/2 (no caso de violinos e violoncelos).\n  - Material: Madeira maci√ßa, laminada ou compensada.\n  - Acess√≥rios: Estojos, arcos, breu.\n  - Uso: Profissional, estudante, orquestra.\n- **Instrumentos de Sopro** :\n  - Afina√ß√£o: Bb (Si bemol), Eb (Mi bemol).\n  - Material: Lat√£o, bronze, madeira (no caso de clarinetes e flautas).\n  - Acabamento: Dourado, niquelado, prateado.\n  - Sistema de Chaves: 17 chaves, 18 chaves.\n- **Instrumentos de Percuss√£o** :\n  - Tipo de Pele: Sint√©tica ou natural, porosa, ataque.\n  - Di√¢metro: Medidas padronizadas para cada tipo de tambor.\n  - N√∫mero de pe√ßas: Kits completos ou individuais.\n  - Acess√≥rios: Baquetas, pedais, suportes, bancos.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 1.5,
      "business_value": 0.6
    },
    {
      "id": "686affb638a5d15c8d42bec6",
      "name": "PROMPT 6.0",
      "desc": "### **Prompt de Licita√ß√µes Simplificado e Eficiente**\n\n#### 1. Introdu√ß√£o\n\nVoc√™ √© um assistente especializado em licita√ß√µes governamentais para instrumentos musicais, √°udio e v√≠deo. Sua tarefa √© analisar editais e identificar correspond√™ncias exatas ou altamente semelhantes entre os itens listados no edital e os produtos dispon√≠veis no nosso estoque. A an√°lise deve considerar descri√ß√µes textuais, especifica√ß√µes t√©cnicas, materiais, dimens√µes, fabricantes e outros crit√©rios relevantes. Para garantir precis√£o, as informa√ß√µes do estoque ser√£o validadas cruzando dados com URLs de fornecedores (sites oficiais). O resultado final deve priorizar sempre os produtos do nosso estoque, utilizando os sites dos fornecedores apenas como fonte de valida√ß√£o.\n\n---\n\n#### **2. Entrada dos Dados**\n\nSer√£o fornecidos dois conjuntos principais de dados:\n\n1. **Itens do Edital** : Uma tabela contendo descri√ß√µes detalhadas, especifica√ß√µes t√©cnicas, quantidades e valores estimados.\n2. **Cat√°logo do Estoque** : Uma tabela contendo informa√ß√µes sobre os produtos dispon√≠veis, incluindo marca, c√≥digo SKU, descri√ß√£o e pre√ßo.\n\n**URLs de Refer√™ncia** (para valida√ß√£o):\n\n- Estoque: [https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true](https://docs.google.com/spreadsheets/d/1UQbeFNPQeN6fmUiFXxMTaozMQPmDbngv/edit?usp=sharing&ouid=112002271729982856264&rtpof=true&sd=true \"smartCard-inline\")\n\nOs URLs servem exclusivamente para validar as informa√ß√µes do nosso estoque. O produto final escolhido deve sempre ser retirado da tabela do estoque.\n\n---\n\n#### **3. Processo de An√°lise**\n\nO processo ser√° dividido em tr√™s fases:\n\n##### **Fase 1: Leitura do Edital**\n\n- Extrair e estruturar as informa√ß√µes dos itens listados no edital.\n- Identificar caracter√≠sticas-chave, como tipo de instrumento, especifica√ß√µes t√©cnicas, materiais, dimens√µes e requisitos espec√≠ficos.\n\n##### **Fase 2: Compara√ß√£o com o Estoque**\n\n- Analisar cada item do edital em rela√ß√£o aos produtos dispon√≠veis no estoque.\n- Utilizar t√©cnicas de NLP (Processamento de Linguagem Natural) para calcular similaridade textual e t√©cnica entre os itens do edital e os produtos do estoque.\n- Armazenar os produtos mais compat√≠veis em uma mem√≥ria tempor√°ria para valida√ß√£o posterior.\n\n##### **Fase 3: Valida√ß√£o com Fornecedores**\n\n- Consultar os sites dos fornecedores (via URLs fornecidas) para validar as especifica√ß√µes t√©cnicas, condi√ß√µes e demais requisitos exigidos no edital.\n- Garantir que as informa√ß√µes do estoque estejam alinhadas com os dados p√∫blicos dos fabricantes.\n- Retornar o produto mais pr√≥ximo dispon√≠vel no estoque, priorizando sempre o nosso cat√°logo.\n\n---\n\n#### **4. Crit√©rios de Classifica√ß√£o**\n\nOs produtos do estoque ser√£o classificados em tr√™s categorias:\n\n1. **Match Exato** : Produtos com descri√ß√£o e especifica√ß√µes id√™nticas ou praticamente id√™nticas ao edital.\n2. **Match Pr√≥ximo** : Produtos com descri√ß√£o e especifica√ß√µes muito semelhantes, mas com pequenas diferen√ßas aceit√°veis.\n3. **Match Fraco** : Produtos com baixa correspond√™ncia, que n√£o atendem aos requisitos do edital.\n\n---\n\n#### **5. Sa√≠da Esperada**\n\nA sa√≠da deve ser uma tabela estruturada com as seguintes colunas(o exemplo abaixo deve ser utilizado apenas de exemplo)\n\n| Item | ESPECIFICA√á√ÉO | QUANTIDADE | VALOR UNIT√ÅRIO | VALOR TOTAL | Linha do Produto no Estoque | Codigo Sku no Estoque | Produto no Estoque |\n| ---- | ------------- | ---------- | -------------- | ----------- | --------------------------- | --------------------- | ------------------ |\n\n**Resumo Geral** :\n\n- N√∫mero total de itens do edital.\n- N√∫mero de itens com Match Exato.\n- N√∫mero de itens com Match Pr√≥ximo.\n- N√∫mero de itens sem correspond√™ncia.\n\n---\n\n#### **6. Considera√ß√µes Finais**\n\n- Caso haja lacunas ou inconsist√™ncias nos dados fornecidos, destaque-as para revis√£o.\n- Priorize sempre os produtos com maior grau de correspond√™ncia no estoque.\n- Utilize os URLs dos fornecedores apenas para valida√ß√£o e nunca como fonte prim√°ria de escolha.\n- As informa√ß√µes finais devem ser baseadas exclusivamente na tabela do estoque.\n\n---\n\n### **7. Caracter√≠sticas Gerais dos Instrumentos**\n\nPara facilitar a an√°lise, considere as seguintes classifica√ß√µes:\n\n#### **Classifica√ß√£o por Tipo de Instrumento**\n\n- **Cordas** : Violino, Viola, Violoncelo, Contrabaixo, Guitarra, Viol√£o.\n- **Sopros (Madeiras e Metais)** : Trompete, Saxofone, Clarinete, Flauta, Trombone.\n- **Percuss√£o** : Bateria, Pandeiro, Caixa, Tambor, Xilofone.\n\n#### **Caracter√≠sticas Gerais**\n\n- **Instrumentos de Cordas** :\n  - Tamanho: 4/4, 3/4, 1/2 (no caso de violinos e violoncelos).\n  - Material: Madeira maci√ßa, laminada ou compensada.\n  - Acess√≥rios: Estojos, arcos, breu.\n  - Uso: Profissional, estudante, orquestra.\n- **Instrumentos de Sopro** :\n  - Afina√ß√£o: Bb (Si bemol), Eb (Mi bemol).\n  - Material: Lat√£o, bronze, madeira (no caso de clarinetes e flautas).\n  - Acabamento: Dourado, niquelado, prateado.\n  - Sistema de Chaves: 17 chaves, 18 chaves.\n- **Instrumentos de Percuss√£o** :\n  - Tipo de Pele: Sint√©tica ou natural, porosa, ataque.\n  - Di√¢metro: Medidas padronizadas para cada tipo de tambor.\n  - N√∫mero de pe√ßas: Kits completos ou individuais.\n  - Acess√≥rios: Baquetas, pedais, suportes, bancos.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 1.5,
      "business_value": 0.6
    },
    {
      "id": "686affc4e7cc85dcf3085da4",
      "name": "PROMPT 7.0",
      "desc": "### **Prompt de Licita√ß√µes Simplificado e Eficiente**\n\n#### 1. Introdu√ß√£o\n\nVoc√™ √© um assistente especializado em licita√ß√µes governamentais para instrumentos musicais, √°udio e v√≠deo. Sua tarefa √© analisar editais e identificar correspond√™ncias exatas ou altamente semelhantes entre os itens listados no edital e os produtos dispon√≠veis no nosso estoque. A an√°lise deve considerar descri√ß√µes textuais, especifica√ß√µes t√©cnicas, materiais, dimens√µes, fabricantes e outros crit√©rios relevantes. Para garantir precis√£o, as informa√ß√µes do estoque ser√£o fornecidas por uma planilha, e podem ser validadas cruzando dados com URLs de fornecedores (sites oficiais). O resultado final deve priorizar sempre os produtos do nosso estoque, utilizando os sites dos fornecedores apenas como fonte de valida√ß√£o.\n\n---\n\n#### **2. Entrada dos Dados**\n\nSer√£o fornecidos dois conjuntos principais de dados:\n\n1. **Itens do Edital** : Uma tabela contendo descri√ß√µes detalhadas, especifica√ß√µes t√©cnicas, quantidades e valores estimados de cada instrumento musical, detalhado linha √† linha.\n   | N¬∫ Item | Descri√ß√£o | Quantidade | Valor Unit√°rio | Valor Total |\n2. **Cat√°logo do Estoque** : Uma tabela contendo informa√ß√µes sobre os produtos dispon√≠veis, incluindo marca, c√≥digo SKU, descri√ß√£o e pre√ßo.\n   | SKU | marca | descri√ß√£o |  pre√ßo |\n\n---\n\n#### **3. Processo de An√°lise**\n\nO processo ser√° dividido em tr√™s fases:\n\n##### **Fase 1: Leitura do Edital**\n\n- Extrair e estruturar as informa√ß√µes dos itens listados no edital.\n- Identificar caracter√≠sticas-chave, como tipo de instrumento, especifica√ß√µes t√©cnicas, materiais, dimens√µes e requisitos espec√≠ficos.\n\n##### **Fase 2: Compara√ß√£o com o Estoque**\n\n- Analisar cada item do edital em rela√ß√£o aos produtos dispon√≠veis no estoque.\n- Utilizar t√©cnicas de NLP (Processamento de Linguagem Natural) para calcular similaridade textual e t√©cnica entre os itens do edital e os produtos do estoque.\n- Varrer todas as linhas da planilha estoque buscando correla√ß√£o.\n- Armazenar os produtos mais compat√≠veis em um framework.\n- Ap√≥s varrer todas as linhas do estoque, encontrar o produto com maior correla√ß√£o poss√≠vel com o produto que estamos vendo no momento.\n- Tire um tempo para pensar sobre a compatibilidade do item seguindo as instru√ß√µes a seguir na 'Fase3: Valida√ß√£o com Fornecedores'\n- Repetir o processo para cada linha do Edital buscando conformidade.\n\n##### **Fase 3: Valida√ß√£o com Fornecedores**\n\n- Consultar os sites dos fornecedores (via URLs fornecidas) para validar as especifica√ß√µes t√©cnicas, condi√ß√µes e demais requisitos exigidos no edital.\n- Garantir que as informa√ß√µes do estoque estejam alinhadas com os dados p√∫blicos dos fabricantes.\n- Retornar o produto mais pr√≥ximo dispon√≠vel no estoque, priorizando sempre o nosso cat√°logo.\n\n---\n\n#### **4. Crit√©rios de Classifica√ß√£o**\n\nOs produtos do estoque ser√£o classificados em tr√™s categorias:\n\n1. **Match Exato** : Produtos com descri√ß√£o e especifica√ß√µes id√™nticas ou praticamente id√™nticas ao edital.\n2. **Match Pr√≥ximo** : Produtos com descri√ß√£o e especifica√ß√µes muito semelhantes, mas com pequenas diferen√ßas aceit√°veis.\n3. **Match Fraco** : Produtos com baixa correspond√™ncia, que n√£o atendem aos requisitos do edital.\n\n---\n\n#### **5. Sa√≠da Esperada**\n\nA sa√≠da deve ser uma tabela estruturada com as seguintes colunas e informa√ß√µes contidas, ambas no edital e no estoque.\n\n| N¬∫ Item | Descri√ß√£o no Edital | Quantidade | Valor Unitario | Valor Total | Marca Estoque | Descri√ß√£o no Estoque | Pre√ßo no Estoque | Linha no Estoque  |\n| ------- | ------------------- | ---------- | -------------- | ----------- | ------------- | -------------------- | ---------------- | ----------------- |\n\n**Resumo Geral** :\n\n- N√∫mero total de itens do edital.\n- N√∫mero de itens com Match Exato.\n- N√∫mero de itens com Match Pr√≥ximo.\n- N√∫mero de itens sem correspond√™ncia.\n\n---\n\n#### **6. Considera√ß√µes Finais**\n\n- Caso haja lacunas ou inconsist√™ncias nos dados fornecidos, destaque-as para revis√£o.\n- Priorize sempre os produtos com maior grau de correspond√™ncia no estoque.\n- Utilize os URLs dos fornecedores apenas para valida√ß√£o e nunca como fonte prim√°ria de escolha.\n- As informa√ß√µes finais devem ser baseadas exclusivamente na tabela do estoque.\n\n---\n\n### **7. Caracter√≠sticas Gerais dos Instrumentos**\n\nPara facilitar a an√°lise, considere as seguintes classifica√ß√µes:\n\n#### **Classifica√ß√£o por Tipo de Instrumento**\n\n- **Cordas** : Violino, Viola, Violoncelo, Contrabaixo, Guitarra, Viol√£o.\n- **Sopros (Madeiras e Metais)** : Trompete, Saxofone, Clarinete, Flauta, Trombone.\n- **Percuss√£o** : Bateria, Pandeiro, Caixa, Tambor, Xilofone.\n\n#### **Caracter√≠sticas Gerais**\n\n- **Instrumentos de Cordas** :\n  - Tamanho: 4/4, 3/4, 1/2 (no caso de violinos e violoncelos).\n  - Material: Madeira maci√ßa, laminada ou compensada.\n  - Acess√≥rios: Estojos, arcos, breu.\n  - Uso: Profissional, estudante, orquestra.\n- **Instrumentos de Sopro** :\n  - Afina√ß√£o: Bb (Si bemol), Eb (Mi bemol).\n  - Material: Lat√£o, bronze, madeira (no caso de clarinetes e flautas).\n  - Acabamento: Dourado, niquelado, prateado.\n  - Sistema de Chaves: 17 chaves, 18 chaves.\n- **Instrumentos de Percuss√£o** :\n  - Tipo de Pele: Sint√©tica ou natural, porosa, ataque.\n  - Di√¢metro: Medidas padronizadas para cada tipo de tambor.\n  - N√∫mero de pe√ßas: Kits completos ou individuais.\n  - Acess√≥rios: Baquetas, pedais, suportes, bancos.\n\n### **8. Para come√ßar o trabalho**\n\nPara come√ßar o trabalho voc√™ deve solicitar primeiro o envio da planilha do estoque. Voc√™ ir√° memorizar todos os itens contidos no estoque, buscar conhecimento nos sites dos fornecedores, adquirir propriedade no assunto. Em sequencia ir√° solicitar o Edital/Arquivo contendo os itens para executar sua pesquisa e cria√ß√£o do or√ßamento compat√≠vel com os itens do nosso estoque.",
      "list_id": "68569b7191cc868682152922",
      "list_name": "Procesos",
      "labels": [],
      "due_date": null,
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 1.5,
      "business_value": 0.6
    },
    {
      "id": "686219a3c2e5caafdf32a7b8",
      "name": "PREFEITURA MUNICIPAL SANTA CRUZ DO XINGU - MT\nUasg: 981094\nPreg√£o Eletr√¥nico 90008/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [
        "DECLINAR"
      ],
      "due_date": "2025-07-03T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7b1",
      "name": "ESP-GABINETE DO SECRETARIO E ASSES.SEC.AD.PEN\nUasg: 380101\nPreg√£o Eletr√¥nico 90033/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-04T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "68644c825b1100c03f4915d0",
      "name": "UNIVERSIDADE FEDERAL RURAL DE PERNAMBUCO\nUasg: 153165\nDispensa Eletr√¥nica 90052/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-07T19:56:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7c0",
      "name": "PREFEITURA MUNICIPAL DE RIO LARGO - AL\nUasg: 982853\nPreg√£o Eletr√¥nico SRP 90039/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-07T23:44:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7b6",
      "name": "PREFEITURA MUNICIPAL DE CAMPO BELO-MG\nUasg: 984223\nPreg√£o Eletr√¥nico SRP 90103/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [
        "DISPUTANDO"
      ],
      "due_date": "2025-07-08T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7b7",
      "name": "MAER - BASE AEREA DE FLORIANOPOLIS - SC\nUasg: 120073\nPreg√£o Eletr√¥nico SRP 91064/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-09T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7ba",
      "name": "MEC-DECANATO CENTRO DE FILOS.E CIEN.HUM.UF/RJ\nUasg: 153128\nDispensa Eletr√¥nica 90020/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-09T13:08:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7b9",
      "name": "ESP-ESCOLA DE ARTES CI√äNCIAS E HUMAN- USP\nUasg: 102168\nDispensa Eletr√¥nica 90068/2025",
      "desc": "",
      "list_id": "6650f3369bb9bacb525d1dc8",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-23T23:44:00.000Z",
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 0.0,
      "business_value": 0.6
    },
    {
      "id": "685df750090fc34a1ff207a4",
      "name": "CONSELHO REGIONAL DE CONTABILIDADE - RJ\nUasg: 383518\nDispensa Eletr√¥nica 90015/2025",
      "desc": "",
      "list_id": "68569b7191cc868682152916",
      "list_name": "PREPARANDO",
      "labels": [
        "Come√ßar"
      ],
      "due_date": "2025-07-01T13:08:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "685df81d1b4d106f8b6703b1",
      "name": "ESP-UNESP-FACUL.DE ENGENHARIA-C.ILHA SOLTEIRA\nUasg: 102318\nPreg√£o Eletr√¥nico 90035/2025",
      "desc": "",
      "list_id": "68569b7191cc868682152916",
      "list_name": "PREPARANDO",
      "labels": [
        "Come√ßar"
      ],
      "due_date": "2025-07-02T09:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "685df7f832441059480162c0",
      "name": "ESP-GABINETE DO SECRETARIO E ASSES.SEC.AD.PEN\nUasg: 380101\nPreg√£o Eletr√¥nico 90033/2025",
      "desc": "",
      "list_id": "68569b7191cc868682152916",
      "list_name": "PREPARANDO",
      "labels": [
        "Come√ßar"
      ],
      "due_date": "2025-07-04T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "6861405e3da508a0dc9851ab",
      "name": "PREFEITURA MUNICIPAL DE RIO LARGO - AL\nUasg: 982853\nPreg√£o Eletr√¥nico SRP 90039/2025",
      "desc": "",
      "list_id": "68569b7191cc868682152916",
      "list_name": "PREPARANDO",
      "labels": [],
      "due_date": "2025-07-07T23:44:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "6862189d48aaea2a8c99ef5b",
      "name": "PREFEITURA MUNICIPAL DE CAMPO BELO-MG\nUasg: 984223\nPreg√£o Eletr√¥nico SRP 90103/2025",
      "desc": "",
      "list_id": "6862189d48aaea2a8c99eed8",
      "list_name": "OR√áAMENTO",
      "labels": [],
      "due_date": "2025-07-08T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "6862189d48aaea2a8c99ef61",
      "name": "MAER - BASE AEREA DE FLORIANOPOLIS - SC\nUasg: 120073\nPreg√£o Eletr√¥nico SRP 91064/2025",
      "desc": "",
      "list_id": "6862189d48aaea2a8c99eed8",
      "list_name": "OR√áAMENTO",
      "labels": [],
      "due_date": "2025-07-09T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "6862189d48aaea2a8c99ef59",
      "name": "MEC-DECANATO CENTRO DE FILOS.E CIEN.HUM.UF/RJ\nUasg: 153128\nDispensa Eletr√¥nica 90020/2025",
      "desc": "",
      "list_id": "6862189d48aaea2a8c99eed8",
      "list_name": "OR√áAMENTO",
      "labels": [],
      "due_date": "2025-07-09T13:08:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "6862189d48aaea2a8c99ef5c",
      "name": "ESP-ESCOLA DE ARTES CI√äNCIAS E HUMAN- USP\nUasg: 102168\nDispensa Eletr√¥nica 90068/2025",
      "desc": "",
      "list_id": "6862189d48aaea2a8c99eed8",
      "list_name": "OR√áAMENTO",
      "labels": [],
      "due_date": "2025-07-23T23:44:00.000Z",
      "members": [],
      "priority_score": 2.0,
      "automation_potential": 0.0,
      "business_value": 0.6
    },
    {
      "id": "68569b7191cc86868215299b",
      "name": "COMANDO DA MARINHA\nBATALHAO NAVAL\nUasg: 731050\nDispensa Eletr√¥nica 90046/2025",
      "desc": "COMANDO DA MARINHA\nBATALHAO NAVAL\nUasg: 731050\nDispensa Eletr√¥nica 90046/2025\nPossui itens preferenciais/exclusivos ME/EPP ou equiparadas\nEntrega da Proposta at√©: 24/06/2025 √†s 07:59 Hs\nPer√≠odo para envio de lances: 24/06/2025 √†s 08:00 Hs at√© 24/06/2025 √†s 14:00 Hs",
      "list_id": "68569b7191cc868682152918",
      "list_name": "PROPOSTA",
      "labels": [],
      "due_date": "2025-06-24T17:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a7b2",
      "name": "CONSELHO REGIONAL DE CONTABILIDADE - RJ\nUasg: 383518\nDispensa Eletr√¥nica 90015/2025",
      "desc": "",
      "list_id": "685c4138cfd6d79df4b91800",
      "list_name": "RESUMO",
      "labels": [
        "Come√ßar",
        "DECLINAR"
      ],
      "due_date": "2025-07-01T13:08:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "686219a3c2e5caafdf32a82b",
      "name": "SECRETARIA NAVAL DE SEGURAN√ßA N E QUALIDADE\nUasg: 718000\nDispensa Eletr√¥nica 90016/2025",
      "desc": "",
      "list_id": "685c4138cfd6d79df4b91800",
      "list_name": "RESUMO",
      "labels": [
        "DECLINAR"
      ],
      "due_date": "2025-07-03T12:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "68569b7191cc8686821529a9",
      "name": "MINIST√©RIO P√∫BLICO DO ESTADO DO MATO GROSSO\nUasg: 926625\nDispensa Eletr√¥nica 90041/2025",
      "desc": "",
      "list_id": "685c4138cfd6d79df4b91800",
      "list_name": "RESUMO",
      "labels": [
        "DECLINAR"
      ],
      "due_date": "2025-06-26T11:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    },
    {
      "id": "68569b7191cc8686821529ad",
      "name": "COMANDO DA MARINHA\nCENTRO DE ED.F√çSICA ALMIRANTE ADALBERTO NUNES\nUasg: 732400\nDispensa Eletr√¥nica 90066/2025",
      "desc": "6 -  R$ 886,86",
      "list_id": "685c4138cfd6d79df4b91800",
      "list_name": "RESUMO",
      "labels": [
        "DECLINAR"
      ],
      "due_date": "2025-06-25T11:00:00.000Z",
      "members": [],
      "priority_score": 10.0,
      "automation_potential": 0.0,
      "business_value": 3.0
    }
  ],
  "prompts_analysis": [
    {
      "filename": "GPT.py",
      "content": "\nimport openai\nimport requests\nimport json\nfrom typing import Dict, List, Optional\nimport asyncio\n\nclass GPTIntegration:\n    def __init__(self, api_key: str):\n        self.api_key = api_key\n        self.client = openai.OpenAI(api_key=api_key)\n    \n    async def process_trello_card(self, card_data: Dict) -> Dict:\n        prompt = f\"\"\"\n        Analise este card do Trello e sugira automa√ß√µes:\n        Nome: {card_data['name']}\n        Descri√ß√£o: {card_data['desc']}\n        Lista: {card_data['list_name']}\n        \"\"\"\n        \n        response = self.client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": prompt}]\n        )\n        \n        return {\n            \"analysis\": response.choices[0].message.content,\n            \"automation_suggestions\": self.extract_automation_suggestions(response.choices[0].message.content)\n        }\n    \n    def extract_automation_suggestions(self, analysis: str) -> List[str]:\n        # Extrair sugest√µes de automa√ß√£o do texto\n        suggestions = []\n        lines = analysis.split('\\n')\n        for line in lines:\n            if 'automa√ß√£o' in line.lower() or 'automation' in line.lower():\n                suggestions.append(line.strip())\n        return suggestions\n                    ",
      "category": "AI_Integration",
      "path": "01_PROCESOS/GPT.py",
      "complexity_score": 14.9,
      "automation_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "ASYNC_PROCESSING"
      ],
      "implementation_effort": "M√âDIO"
    },
    {
      "filename": "government_apis_integration.py",
      "content": "\nimport requests\nimport json\nfrom datetime import datetime\nfrom typing import Dict, Optional\n\nclass GovernmentAPIConnector:\n    def __init__(self):\n        self.base_urls = {\n            'receita_federal': 'https://www.receitafederal.gov.br/api',\n            'ibge': 'https://servicodados.ibge.gov.br/api/v1',\n            'cep': 'https://viacep.com.br/ws',\n            'cnpj': 'https://www.receitaws.com.br/v1/cnpj'\n        }\n        self.session = requests.Session()\n    \n    def consultar_cnpj(self, cnpj: str) -> Dict:\n        cnpj_clean = ''.join(filter(str.isdigit, cnpj))\n        url = f\"{self.base_urls['cnpj']}/{cnpj_clean}\"\n        \n        try:\n            response = self.session.get(url, timeout=10)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e), \"cnpj\": cnpj}\n    \n    def consultar_cep(self, cep: str) -> Dict:\n        cep_clean = ''.join(filter(str.isdigit, cep))\n        url = f\"{self.base_urls['cep']}/{cep_clean}/json\"\n        \n        try:\n            response = self.session.get(url, timeout=10)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e), \"cep\": cep}\n    \n    def consultar_municipios(self, uf: str) -> List[Dict]:\n        url = f\"{self.base_urls['ibge']}/localidades/estados/{uf}/municipios\"\n        \n        try:\n            response = self.session.get(url, timeout=10)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return [{\"error\": str(e), \"uf\": uf}]\n                    ",
      "category": "Government_APIs",
      "path": "01_PROCESOS/government_apis_integration.py",
      "complexity_score": 17.8,
      "automation_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "GOVERNMENT_APIS"
      ],
      "implementation_effort": "ALTO"
    },
    {
      "filename": "trello_automation.py",
      "content": "\nimport requests\nimport json\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\n\nclass TrelloAutomation:\n    def __init__(self, api_key: str, token: str):\n        self.api_key = api_key\n        self.token = token\n        self.base_url = \"https://api.trello.com/1\"\n        self.session = requests.Session()\n    \n    def create_card(self, list_id: str, name: str, desc: str, due_date: Optional[str] = None) -> Dict:\n        url = f\"{self.base_url}/cards\"\n        params = {\n            'key': self.api_key,\n            'token': self.token,\n            'idList': list_id,\n            'name': name,\n            'desc': desc\n        }\n        \n        if due_date:\n            params['due'] = due_date\n        \n        try:\n            response = self.session.post(url, params=params)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e)}\n    \n    def update_card(self, card_id: str, updates: Dict) -> Dict:\n        url = f\"{self.base_url}/cards/{card_id}\"\n        params = {'key': self.api_key, 'token': self.token}\n        params.update(updates)\n        \n        try:\n            response = self.session.put(url, params=params)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e)}\n    \n    def add_comment(self, card_id: str, text: str) -> Dict:\n        url = f\"{self.base_url}/cards/{card_id}/actions/comments\"\n        params = {\n            'key': self.api_key,\n            'token': self.token,\n            'text': text\n        }\n        \n        try:\n            response = self.session.post(url, params=params)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            return {\"error\": str(e)}\n    \n    def move_card(self, card_id: str, list_id: str) -> Dict:\n        return self.update_card(card_id, {'idList': list_id})\n    \n    def set_due_date(self, card_id: str, due_date: str) -> Dict:\n        return self.update_card(card_id, {'due': due_date})\n                    ",
      "category": "Trello_Automation",
      "path": "02_AUTOMACAO/trello_automation.py",
      "complexity_score": 20.0,
      "automation_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION"
      ],
      "implementation_effort": "ALTO"
    },
    {
      "filename": "data_processor.py",
      "content": "\nimport pandas as pd\nimport json\nimport numpy as np\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Optional\n\nclass DataProcessor:\n    def __init__(self):\n        self.processed_data = {}\n        self.analytics = {}\n    \n    def process_trello_export(self, json_data: Dict) -> pd.DataFrame:\n        cards = json_data.get('cards', [])\n        \n        # Converter para DataFrame\n        df = pd.DataFrame(cards)\n        \n        # Processar datas\n        if 'dateLastActivity' in df.columns:\n            df['dateLastActivity'] = pd.to_datetime(df['dateLastActivity'])\n        \n        if 'due' in df.columns:\n            df['due'] = pd.to_datetime(df['due'])\n        \n        # Adicionar m√©tricas calculadas\n        df['desc_length'] = df['desc'].str.len()\n        df['has_due_date'] = df['due'].notna()\n        df['is_overdue'] = (df['due'] < datetime.now()) & df['has_due_date']\n        \n        return df\n    \n    def analyze_productivity_patterns(self, df: pd.DataFrame) -> Dict:\n        patterns = {\n            'cards_by_list': df.groupby('idList').size().to_dict(),\n            'cards_by_month': df.groupby(df['dateLastActivity'].dt.month).size().to_dict(),\n            'average_desc_length': df['desc_length'].mean(),\n            'overdue_percentage': (df['is_overdue'].sum() / len(df)) * 100,\n            'cards_with_due_dates': df['has_due_date'].sum(),\n            'most_active_day': df['dateLastActivity'].dt.day_name().mode().iloc[0] if not df.empty else None\n        }\n        \n        return patterns\n    \n    def generate_automation_recommendations(self, df: pd.DataFrame) -> List[Dict]:\n        recommendations = []\n        \n        # Cards sem data de vencimento\n        no_due_date = df[~df['has_due_date']]\n        if len(no_due_date) > 0:\n            recommendations.append({\n                'type': 'due_date_automation',\n                'description': f'{len(no_due_date)} cards sem data de vencimento',\n                'action': 'Implementar automa√ß√£o para definir datas baseadas no tipo de card',\n                'priority': 'M√âDIA'\n            })\n        \n        # Cards em atraso\n        overdue = df[df['is_overdue']]\n        if len(overdue) > 0:\n            recommendations.append({\n                'type': 'overdue_notification',\n                'description': f'{len(overdue)} cards em atraso',\n                'action': 'Configurar notifica√ß√µes autom√°ticas para cards em atraso',\n                'priority': 'ALTA'\n            })\n        \n        # Listas com muitos cards\n        cards_per_list = df.groupby('idList').size()\n        overloaded_lists = cards_per_list[cards_per_list > 20]\n        if len(overloaded_lists) > 0:\n            recommendations.append({\n                'type': 'list_organization',\n                'description': f'{len(overloaded_lists)} listas sobrecarregadas',\n                'action': 'Implementar automa√ß√£o para organizar cards por prioridade',\n                'priority': 'M√âDIA'\n            })\n        \n        return recommendations\n                    ",
      "category": "Data_Processing",
      "path": "03_DADOS/data_processor.py",
      "complexity_score": 17.0,
      "automation_tags": [
        "DATA_PROCESSING",
        "TRELLO_AUTOMATION"
      ],
      "implementation_effort": "ALTO"
    },
    {
      "filename": "api_connector.py",
      "content": "\nimport requests\nimport asyncio\nimport aiohttp\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Optional, Any\n\nclass UniversalAPIConnector:\n    def __init__(self):\n        self.session = None\n        self.rate_limits = {}\n        self.api_configs = {}\n    \n    async def setup_session(self):\n        if not self.session:\n            self.session = aiohttp.ClientSession()\n    \n    async def close_session(self):\n        if self.session:\n            await self.session.close()\n    \n    async def make_async_request(self, url: str, method: str = 'GET', **kwargs) -> Dict:\n        await self.setup_session()\n        \n        try:\n            async with self.session.request(method, url, **kwargs) as response:\n                return {\n                    'status': response.status,\n                    'data': await response.json(),\n                    'headers': dict(response.headers)\n                }\n        except Exception as e:\n            return {'error': str(e), 'url': url}\n    \n    def make_sync_request(self, url: str, method: str = 'GET', **kwargs) -> Dict:\n        try:\n            response = requests.request(method, url, **kwargs)\n            response.raise_for_status()\n            return {\n                'status': response.status_code,\n                'data': response.json(),\n                'headers': dict(response.headers)\n            }\n        except Exception as e:\n            return {'error': str(e), 'url': url}\n    \n    async def connect_multiple_apis(self, api_configs: List[Dict]) -> Dict:\n        results = {}\n        tasks = []\n        \n        for config in api_configs:\n            task = self.make_async_request(\n                config['url'],\n                method=config.get('method', 'GET'),\n                headers=config.get('headers', {}),\n                params=config.get('params', {})\n            )\n            tasks.append((config['name'], task))\n        \n        for name, task in tasks:\n            results[name] = await task\n        \n        return results\n    \n    def setup_webhook_handler(self, webhook_url: str, secret: str) -> Dict:\n        return {\n            'webhook_url': webhook_url,\n            'secret': secret,\n            'setup_date': datetime.now().isoformat(),\n            'status': 'configured'\n        }\n    \n    def validate_api_response(self, response: Dict, expected_fields: List[str]) -> bool:\n        if 'error' in response:\n            return False\n        \n        data = response.get('data', {})\n        return all(field in data for field in expected_fields)\n                    ",
      "category": "API_Integration",
      "path": "04_APIS/api_connector.py",
      "complexity_score": 20.0,
      "automation_tags": [
        "API_INTEGRATION",
        "DATA_PROCESSING",
        "AI_INTEGRATION",
        "TRELLO_AUTOMATION",
        "WEBHOOK_HANDLER",
        "ASYNC_PROCESSING"
      ],
      "implementation_effort": "ALTO"
    }
  ]
}